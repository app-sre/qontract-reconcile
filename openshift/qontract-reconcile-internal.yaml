---
# Source: qontract-reconcile/templates/template.yaml
apiVersion: v1
kind: Template
metadata:
  name: qontract-reconcile
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-slack-usergroups
    name: qontract-reconcile-slack-usergroups
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-slack-usergroups
    template:
      metadata:
        labels:
          app: qontract-reconcile-slack-usergroups
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[slack-usergroups] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name slack-usergroups
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: slack-usergroups
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${SLACK_USERGROUPS_CPU_LIMIT}
              memory: ${SLACK_USERGROUPS_MEMORY_LIMIT}
            requests:
              cpu: ${SLACK_USERGROUPS_CPU_REQUEST}
              memory: ${SLACK_USERGROUPS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: internal-certificates
          image: ${INTERNAL_CERTIFICATES_IMAGE}:${INTERNAL_CERTIFICATES_IMAGE_TAG}
          imagePullPolicy: ${INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY}
          command: ["/bin/sh", "-c"]
          args:
          - |
            cp -r /etc/pki/. /tmp/etc-pki/
          volumeMounts:
          - name: internal-certificates
            mountPath: /tmp/etc-pki/
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: internal-certificates
            mountPath: /etc/pki/
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
        - name: internal-certificates
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-clusterrolebindings
    name: qontract-reconcile-openshift-clusterrolebindings
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-clusterrolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-clusterrolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: internal-certificates
          image: ${INTERNAL_CERTIFICATES_IMAGE}:${INTERNAL_CERTIFICATES_IMAGE_TAG}
          imagePullPolicy: ${INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY}
          command: ["/bin/sh", "-c"]
          args:
          - |
            cp -r /etc/pki/. /tmp/etc-pki/
          volumeMounts:
          - name: internal-certificates
            mountPath: /tmp/etc-pki/
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-clusterrolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-clusterrolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-clusterrolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_CLUSTERROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_CLUSTERROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_CLUSTERROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_CLUSTERROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: internal-certificates
            mountPath: /etc/pki/
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
        - name: internal-certificates
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-users
    name: qontract-reconcile-openshift-users
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-users
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-users
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-users] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-users
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-users
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_USERS_CPU_LIMIT}
              memory: ${OPENSHIFT_USERS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_USERS_CPU_REQUEST}
              memory: ${OPENSHIFT_USERS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-upgrade-watcher
    name: qontract-reconcile-openshift-upgrade-watcher
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-upgrade-watcher
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-upgrade-watcher
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-upgrade-watcher
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-upgrade-watcher
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_UPGRADE_WATCHER_CPU_LIMIT}
              memory: ${OPENSHIFT_UPGRADE_WATCHER_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_UPGRADE_WATCHER_CPU_REQUEST}
              memory: ${OPENSHIFT_UPGRADE_WATCHER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-groups
    name: qontract-reconcile-openshift-groups
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-groups
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-groups
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-groups] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-groups
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-groups
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_GROUPS_CPU_LIMIT}
              memory: ${OPENSHIFT_GROUPS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_GROUPS_CPU_REQUEST}
              memory: ${OPENSHIFT_GROUPS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-namespace-labels
    name: qontract-reconcile-openshift-namespace-labels
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-namespace-labels
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-namespace-labels
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: internal-certificates
          image: ${INTERNAL_CERTIFICATES_IMAGE}:${INTERNAL_CERTIFICATES_IMAGE_TAG}
          imagePullPolicy: ${INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY}
          command: ["/bin/sh", "-c"]
          args:
          - |
            cp -r /etc/pki/. /tmp/etc-pki/
          volumeMounts:
          - name: internal-certificates
            mountPath: /tmp/etc-pki/
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-namespace-labels] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-namespace-labels
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-namespace-labels
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NAMESPACE_LABELS_CPU_LIMIT}
              memory: ${OPENSHIFT_NAMESPACE_LABELS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NAMESPACE_LABELS_CPU_REQUEST}
              memory: ${OPENSHIFT_NAMESPACE_LABELS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: internal-certificates
            mountPath: /etc/pki/
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
        - name: internal-certificates
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-namespaces
    name: qontract-reconcile-openshift-namespaces
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-namespaces
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-namespaces
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: internal-certificates
          image: ${INTERNAL_CERTIFICATES_IMAGE}:${INTERNAL_CERTIFICATES_IMAGE_TAG}
          imagePullPolicy: ${INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY}
          command: ["/bin/sh", "-c"]
          args:
          - |
            cp -r /etc/pki/. /tmp/etc-pki/
          volumeMounts:
          - name: internal-certificates
            mountPath: /tmp/etc-pki/
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-namespaces] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-namespaces
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-namespaces
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NAMESPACES_CPU_LIMIT}
              memory: ${OPENSHIFT_NAMESPACES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NAMESPACES_CPU_REQUEST}
              memory: ${OPENSHIFT_NAMESPACES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: internal-certificates
            mountPath: /etc/pki/
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
        - name: internal-certificates
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: internal-certificates
          image: ${INTERNAL_CERTIFICATES_IMAGE}:${INTERNAL_CERTIFICATES_IMAGE_TAG}
          imagePullPolicy: ${INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY}
          command: ["/bin/sh", "-c"]
          args:
          - |
            cp -r /etc/pki/. /tmp/etc-pki/
          volumeMounts:
          - name: internal-certificates
            mountPath: /tmp/etc-pki/
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: internal-certificates
            mountPath: /etc/pki/
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
        - name: internal-certificates
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-limitranges
    name: qontract-reconcile-openshift-limitranges
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-limitranges
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-limitranges
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-limitranges] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-limitranges
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-limitranges
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_LIMITRANGES_CPU_LIMIT}
              memory: ${OPENSHIFT_LIMITRANGES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_LIMITRANGES_CPU_REQUEST}
              memory: ${OPENSHIFT_LIMITRANGES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: internal-certificates
          image: ${INTERNAL_CERTIFICATES_IMAGE}:${INTERNAL_CERTIFICATES_IMAGE_TAG}
          imagePullPolicy: ${INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY}
          command: ["/bin/sh", "-c"]
          args:
          - |
            cp -r /etc/pki/. /tmp/etc-pki/
          volumeMounts:
          - name: internal-certificates
            mountPath: /tmp/etc-pki/
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: internal-certificates
            mountPath: /etc/pki/
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
        - name: internal-certificates
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: internal-certificates
          image: ${INTERNAL_CERTIFICATES_IMAGE}:${INTERNAL_CERTIFICATES_IMAGE_TAG}
          imagePullPolicy: ${INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY}
          command: ["/bin/sh", "-c"]
          args:
          - |
            cp -r /etc/pki/. /tmp/etc-pki/
          volumeMounts:
          - name: internal-certificates
            mountPath: /tmp/etc-pki/
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: internal-certificates
            mountPath: /etc/pki/
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
        - name: internal-certificates
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-routes
    name: qontract-reconcile-openshift-routes
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-routes
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-routes
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-routes
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-routes
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROUTES_CPU_LIMIT}
              memory: ${OPENSHIFT_ROUTES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROUTES_CPU_REQUEST}
              memory: ${OPENSHIFT_ROUTES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-serviceaccount-tokens
    name: qontract-reconcile-openshift-serviceaccount-tokens
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-serviceaccount-tokens
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-serviceaccount-tokens
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: internal-certificates
          image: ${INTERNAL_CERTIFICATES_IMAGE}:${INTERNAL_CERTIFICATES_IMAGE_TAG}
          imagePullPolicy: ${INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY}
          command: ["/bin/sh", "-c"]
          args:
          - |
            cp -r /etc/pki/. /tmp/etc-pki/
          volumeMounts:
          - name: internal-certificates
            mountPath: /tmp/etc-pki/
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-serviceaccount-tokens] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-serviceaccount-tokens
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-serviceaccount-tokens
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SERVICEACCOUNT_TOKENS_CPU_LIMIT}
              memory: ${OPENSHIFT_SERVICEACCOUNT_TOKENS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SERVICEACCOUNT_TOKENS_CPU_REQUEST}
              memory: ${OPENSHIFT_SERVICEACCOUNT_TOKENS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: internal-certificates
            mountPath: /etc/pki/
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
        - name: internal-certificates
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-configs
    name: qontract-reconcile-openshift-saas-deploy-trigger-configs-0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-configs
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-configs
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-configs] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-configs
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "3"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-configs
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-configs
    name: qontract-reconcile-openshift-saas-deploy-trigger-configs-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-configs
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-configs
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-configs] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-configs
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "3"
          - name: SHARD_ID
            value: "1"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-configs
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-configs
    name: qontract-reconcile-openshift-saas-deploy-trigger-configs-2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-configs
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-configs
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-configs] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-configs
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "3"
          - name: SHARD_ID
            value: "2"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-configs
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
    name: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits-0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-moving-commits] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-moving-commits
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-moving-commits
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
    name: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-moving-commits] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-moving-commits
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "1"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-moving-commits
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
    name: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits-2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-moving-commits] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-moving-commits
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "2"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-moving-commits
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
    name: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits-3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-moving-commits] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-moving-commits
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "3"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-moving-commits
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
    name: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits-4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-moving-commits
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-moving-commits] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-moving-commits
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "4"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-moving-commits
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs
    name: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs-0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-upstream-jobs] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-upstream-jobs
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "3"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-upstream-jobs
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs
    name: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-upstream-jobs] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-upstream-jobs
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "3"
          - name: SHARD_ID
            value: "1"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-upstream-jobs
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs
    name: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs-2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-upstream-jobs
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-upstream-jobs] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-upstream-jobs
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "3"
          - name: SHARD_ID
            value: "2"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-upstream-jobs
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-saas-deploy-trigger-cleaner
    name: qontract-reconcile-openshift-saas-deploy-trigger-cleaner
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-saas-deploy-trigger-cleaner
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-saas-deploy-trigger-cleaner
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL_TRIGGER}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL_TRIGGER}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-saas-deploy-trigger-cleaner] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-saas-deploy-trigger-cleaner
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-saas-deploy-trigger-cleaner
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CLEANER_CPU_LIMIT}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CLEANER_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CLEANER_CPU_REQUEST}
              memory: ${OPENSHIFT_SAAS_DEPLOY_TRIGGER_CLEANER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-tekton-resources
    name: qontract-reconcile-openshift-tekton-resources
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-tekton-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-tekton-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: internal-certificates
          image: ${INTERNAL_CERTIFICATES_IMAGE}:${INTERNAL_CERTIFICATES_IMAGE_TAG}
          imagePullPolicy: ${INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY}
          command: ["/bin/sh", "-c"]
          args:
          - |
            cp -r /etc/pki/. /tmp/etc-pki/
          volumeMounts:
          - name: internal-certificates
            mountPath: /tmp/etc-pki/
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-tekton-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-tekton-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-tekton-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_TEKTON_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_TEKTON_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_TEKTON_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_TEKTON_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: internal-certificates
            mountPath: /etc/pki/
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
        - name: internal-certificates
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources
    name: qontract-reconcile-terraform-resources
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: internal-certificates
          image: ${INTERNAL_CERTIFICATES_IMAGE}:${INTERNAL_CERTIFICATES_IMAGE_TAG}
          imagePullPolicy: ${INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY}
          command: ["/bin/sh", "-c"]
          args:
          - |
            cp -r /etc/pki/. /tmp/etc-pki/
          volumeMounts:
          - name: internal-certificates
            mountPath: /tmp/etc-pki/
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--internal --light --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: internal-certificates
            mountPath: /etc/pki/
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
        - name: internal-certificates
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-gitlab-projects
    name: qontract-reconcile-gitlab-projects
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-gitlab-projects
    template:
      metadata:
        labels:
          app: qontract-reconcile-gitlab-projects
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[gitlab-projects] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name gitlab-projects
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: gitlab-projects
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${GITLAB_PROJECTS_CPU_LIMIT}
              memory: ${GITLAB_PROJECTS_MEMORY_LIMIT}
            requests:
              cpu: ${GITLAB_PROJECTS_CPU_REQUEST}
              memory: ${GITLAB_PROJECTS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-gitlab-members
    name: qontract-reconcile-gitlab-members
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-gitlab-members
    template:
      metadata:
        labels:
          app: qontract-reconcile-gitlab-members
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[gitlab-members] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name gitlab-members
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: gitlab-members
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${GITLAB_MEMBERS_CPU_LIMIT}
              memory: ${GITLAB_MEMBERS_MEMORY_LIMIT}
            requests:
              cpu: ${GITLAB_MEMBERS_CPU_REQUEST}
              memory: ${GITLAB_MEMBERS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-gitlab-permissions
    name: qontract-reconcile-gitlab-permissions
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-gitlab-permissions
    template:
      metadata:
        labels:
          app: qontract-reconcile-gitlab-permissions
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[gitlab-permissions] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name gitlab-permissions
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: gitlab-permissions
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${GITLAB_PERMISSIONS_CPU_LIMIT}
              memory: ${GITLAB_PERMISSIONS_MEMORY_LIMIT}
            requests:
              cpu: ${GITLAB_PERMISSIONS_CPU_REQUEST}
              memory: ${GITLAB_PERMISSIONS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-gitlab-owners
    name: qontract-reconcile-gitlab-owners
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-gitlab-owners
    template:
      metadata:
        labels:
          app: qontract-reconcile-gitlab-owners
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name gitlab-owners
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: gitlab-owners
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${GITLAB_OWNERS_CPU_LIMIT}
              memory: ${GITLAB_OWNERS_MEMORY_LIMIT}
            requests:
              cpu: ${GITLAB_OWNERS_CPU_REQUEST}
              memory: ${GITLAB_OWNERS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-gitlab-housekeeping
    name: qontract-reconcile-gitlab-housekeeping
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-gitlab-housekeeping
    template:
      metadata:
        labels:
          app: qontract-reconcile-gitlab-housekeeping
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name gitlab-housekeeping
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: gitlab-housekeeping
          - name: INTEGRATION_EXTRA_ARGS
            value: "--wait-for-pipeline"
          - name: SLEEP_DURATION_SECS
            value: ${GITLAB_HOUSEKEEPING_SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${GITLAB_HOUSEKEEPING_CPU_LIMIT}
              memory: ${GITLAB_HOUSEKEEPING_MEMORY_LIMIT}
            requests:
              cpu: ${GITLAB_HOUSEKEEPING_CPU_REQUEST}
              memory: ${GITLAB_HOUSEKEEPING_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: qontract-reconcile-jenkins-job-builder
    name: qontract-reconcile-jenkins-job-builder
  spec:
    volumeClaimTemplates:
    - metadata:
        name: cache
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: gp2
        resources:
          requests:
            storage: 1Gi
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-jenkins-job-builder
    template:
      metadata:
        labels:
          app: qontract-reconcile-jenkins-job-builder
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name jenkins-job-builder
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: jenkins-job-builder
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${JENKINS_JOB_BUILDER_CPU_LIMIT}
              memory: ${JENKINS_JOB_BUILDER_MEMORY_LIMIT}
            requests:
              cpu: ${JENKINS_JOB_BUILDER_CPU_REQUEST}
              memory: ${JENKINS_JOB_BUILDER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: cache
            mountPath: /.cache
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: qontract-reconcile-jenkins-job-cleaner
    name: qontract-reconcile-jenkins-job-cleaner
  spec:
    volumeClaimTemplates:
    - metadata:
        name: cache
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: gp2
        resources:
          requests:
            storage: 1Gi
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-jenkins-job-cleaner
    template:
      metadata:
        labels:
          app: qontract-reconcile-jenkins-job-cleaner
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[jenkins-job-cleaner] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name jenkins-job-cleaner
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: jenkins-job-cleaner
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${JENKINS_JOB_CLEANER_CPU_LIMIT}
              memory: ${JENKINS_JOB_CLEANER_MEMORY_LIMIT}
            requests:
              cpu: ${JENKINS_JOB_CLEANER_CPU_REQUEST}
              memory: ${JENKINS_JOB_CLEANER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: cache
            mountPath: /.cache
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-jenkins-roles
    name: qontract-reconcile-jenkins-roles
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-jenkins-roles
    template:
      metadata:
        labels:
          app: qontract-reconcile-jenkins-roles
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[jenkins-roles] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name jenkins-roles
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: jenkins-roles
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${JENKINS_ROLES_CPU_LIMIT}
              memory: ${JENKINS_ROLES_MEMORY_LIMIT}
            requests:
              cpu: ${JENKINS_ROLES_CPU_REQUEST}
              memory: ${JENKINS_ROLES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app: qontract-reconcile-jenkins-webhooks
    name: qontract-reconcile-jenkins-webhooks
  spec:
    volumeClaimTemplates:
    - metadata:
        name: cache
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: gp2
        resources:
          requests:
            storage: 1Gi
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-jenkins-webhooks
    template:
      metadata:
        labels:
          app: qontract-reconcile-jenkins-webhooks
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[jenkins-webhooks] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name jenkins-webhooks
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: jenkins-webhooks
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${JENKINS_WEBHOOKS_CPU_LIMIT}
              memory: ${JENKINS_WEBHOOKS_MEMORY_LIMIT}
            requests:
              cpu: ${JENKINS_WEBHOOKS_CPU_REQUEST}
              memory: ${JENKINS_WEBHOOKS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: cache
            mountPath: /.cache
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-jenkins-webhooks-cleaner
    name: qontract-reconcile-jenkins-webhooks-cleaner
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-jenkins-webhooks-cleaner
    template:
      metadata:
        labels:
          app: qontract-reconcile-jenkins-webhooks-cleaner
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[jenkins-webhooks-cleaner] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name jenkins-webhooks-cleaner
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: jenkins-webhooks-cleaner
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${JENKINS_WEBHOOKS_CLEANER_CPU_LIMIT}
              memory: ${JENKINS_WEBHOOKS_CLEANER_MEMORY_LIMIT}
            requests:
              cpu: ${JENKINS_WEBHOOKS_CLEANER_CPU_REQUEST}
              memory: ${JENKINS_WEBHOOKS_CLEANER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-gitlab-mr-sqs-consumer
    name: qontract-reconcile-gitlab-mr-sqs-consumer
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-gitlab-mr-sqs-consumer
    template:
      metadata:
        labels:
          app: qontract-reconcile-gitlab-mr-sqs-consumer
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name gitlab-mr-sqs-consumer
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: gitlab-mr-sqs-consumer
          - name: INTEGRATION_EXTRA_ARGS
            value: "${APP_INTERFACE_PROJECT_ID}"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          - name: gitlab_pr_submitter_queue_url
            valueFrom:
              secretKeyRef:
                name: ${APP_INTERFACE_SQS_SECRET_NAME}
                key: gitlab_pr_submitter_queue_url
          resources:
            limits:
              cpu: ${GITLAB_MR_SQS_CONSUMER_CPU_LIMIT}
              memory: ${GITLAB_MR_SQS_CONSUMER_MEMORY_LIMIT}
            requests:
              cpu: ${GITLAB_MR_SQS_CONSUMER_CPU_REQUEST}
              memory: ${GITLAB_MR_SQS_CONSUMER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-status-page-components
    name: qontract-reconcile-status-page-components
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-status-page-components
    template:
      metadata:
        labels:
          app: qontract-reconcile-status-page-components
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name status-page-components
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: status-page-components
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${STATUS_PAGE_COMPONENTS_CPU_LIMIT}
              memory: ${STATUS_PAGE_COMPONENTS_MEMORY_LIMIT}
            requests:
              cpu: ${STATUS_PAGE_COMPONENTS_CPU_REQUEST}
              memory: ${STATUS_PAGE_COMPONENTS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: qontract-reconcile-jenkins-job-builds-cleaner
    name: qontract-reconcile-jenkins-job-builds-cleaner
  spec:
    schedule: "0 * * * *"
    concurrencyPolicy: Forbid
    successfulJobHistoryLimit: 3
    failedJobHistoryLimit: 1
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: int
              image: ${IMAGE}:${IMAGE_TAG}
              env:
              - name: RUN_ONCE
                value: 'true'
              - name: DRY_RUN
                value: ${DRY_RUN}
              - name: INTEGRATION_NAME
                value: jenkins-job-builds-cleaner
              - name: INTEGRATION_EXTRA_ARGS
                value: ""
              - name: GITHUB_API
                valueFrom:
                  configMapKeyRef:
                    name: app-interface
                    key: GITHUB_API
              - name: UNLEASH_API_URL
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: API_URL
              - name: UNLEASH_CLIENT_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: CLIENT_ACCESS_TOKEN
              volumeMounts:
              - name: qontract-reconcile-toml
                mountPath: /config
              resources:
                limits:
                  cpu: ${JENKINS_JOB_BUILDS_CLEANER_CPU_LIMIT}
                  memory: ${JENKINS_JOB_BUILDS_CLEANER_MEMORY_LIMIT}
                requests:
                  cpu: ${JENKINS_JOB_BUILDS_CLEANER_CPU_REQUEST}
                  memory: ${JENKINS_JOB_BUILDS_CLEANER_MEMORY_REQUEST}
            restartPolicy: OnFailure
            volumes:
            - name: qontract-reconcile-toml
              secret:
                secretName: qontract-reconcile-toml
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: qontract-reconcile-cluster-deployment-mapper
    name: qontract-reconcile-cluster-deployment-mapper
  spec:
    schedule: "0 0 * * *"
    concurrencyPolicy: Allow
    successfulJobHistoryLimit: 3
    failedJobHistoryLimit: 1
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: int
              image: ${IMAGE}:${IMAGE_TAG}
              env:
              - name: RUN_ONCE
                value: 'true'
              - name: DRY_RUN
                value: ${DRY_RUN}
              - name: INTEGRATION_NAME
                value: cluster-deployment-mapper
              - name: INTEGRATION_EXTRA_ARGS
                value: "--vault-output-path app-sre/integrations-output"
              - name: GITHUB_API
                valueFrom:
                  configMapKeyRef:
                    name: app-interface
                    key: GITHUB_API
              - name: UNLEASH_API_URL
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: API_URL
              - name: UNLEASH_CLIENT_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: CLIENT_ACCESS_TOKEN
              volumeMounts:
              - name: qontract-reconcile-toml
                mountPath: /config
              resources:
                limits:
                  cpu: ${CLUSTER_DEPLOYMENT_MAPPER_CPU_LIMIT}
                  memory: ${CLUSTER_DEPLOYMENT_MAPPER_MEMORY_LIMIT}
                requests:
                  cpu: ${CLUSTER_DEPLOYMENT_MAPPER_CPU_REQUEST}
                  memory: ${CLUSTER_DEPLOYMENT_MAPPER_MEMORY_REQUEST}
            restartPolicy: OnFailure
            volumes:
            - name: qontract-reconcile-toml
              secret:
                secretName: qontract-reconcile-toml
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: qontract-reconcile-ldap-users
    name: qontract-reconcile-ldap-users
  spec:
    schedule: "0 * * * *"
    concurrencyPolicy: Allow
    successfulJobHistoryLimit: 3
    failedJobHistoryLimit: 1
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: int
              image: ${IMAGE}:${IMAGE_TAG}
              env:
              - name: RUN_ONCE
                value: 'true'
              - name: DRY_RUN
                value: ${DRY_RUN}
              - name: INTEGRATION_NAME
                value: ldap-users
              - name: INTEGRATION_EXTRA_ARGS
                value: "${APP_INTERFACE_PROJECT_ID}"
              - name: GITHUB_API
                valueFrom:
                  configMapKeyRef:
                    name: app-interface
                    key: GITHUB_API
              - name: UNLEASH_API_URL
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: API_URL
              - name: UNLEASH_CLIENT_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: CLIENT_ACCESS_TOKEN
              volumeMounts:
              - name: qontract-reconcile-toml
                mountPath: /config
              resources:
                limits:
                  cpu: ${LDAP_USERS_CPU_LIMIT}
                  memory: ${LDAP_USERS_MEMORY_LIMIT}
                requests:
                  cpu: ${LDAP_USERS_CPU_REQUEST}
                  memory: ${LDAP_USERS_MEMORY_REQUEST}
            restartPolicy: OnFailure
            volumes:
            - name: qontract-reconcile-toml
              secret:
                secretName: qontract-reconcile-toml
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: qontract-reconcile-dashdotdb-cso
    name: qontract-reconcile-dashdotdb-cso
  spec:
    schedule: "0 */6 * * *"
    concurrencyPolicy: Replace
    successfulJobHistoryLimit: 3
    failedJobHistoryLimit: 1
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: int
              image: ${IMAGE}:${IMAGE_TAG}
              env:
              - name: RUN_ONCE
                value: 'true'
              - name: DRY_RUN
                value: ${DRY_RUN}
              - name: INTEGRATION_NAME
                value: dashdotdb-cso
              - name: INTEGRATION_EXTRA_ARGS
                value: ""
              - name: GITHUB_API
                valueFrom:
                  configMapKeyRef:
                    name: app-interface
                    key: GITHUB_API
              - name: UNLEASH_API_URL
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: API_URL
              - name: UNLEASH_CLIENT_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: CLIENT_ACCESS_TOKEN
              - name: DASHDOTDB_SECRET
                valueFrom:
                  secretKeyRef:
                    name: dashdotdb
                    key: AUTH_VAULT_PATH
              volumeMounts:
              - name: qontract-reconcile-toml
                mountPath: /config
              resources:
                limits:
                  cpu: ${DASHDOTDB_CSO_CPU_LIMIT}
                  memory: ${DASHDOTDB_CSO_MEMORY_LIMIT}
                requests:
                  cpu: ${DASHDOTDB_CSO_CPU_REQUEST}
                  memory: ${DASHDOTDB_CSO_MEMORY_REQUEST}
            restartPolicy: OnFailure
            volumes:
            - name: qontract-reconcile-toml
              secret:
                secretName: qontract-reconcile-toml
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: qontract-reconcile-dashdotdb-dvo
    name: qontract-reconcile-dashdotdb-dvo
  spec:
    schedule: "0 2 * * *"
    concurrencyPolicy: Replace
    successfulJobHistoryLimit: 12
    failedJobHistoryLimit: 12
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: int
              image: ${IMAGE}:${IMAGE_TAG}
              env:
              - name: RUN_ONCE
                value: 'true'
              - name: DRY_RUN
                value: ${DRY_RUN}
              - name: INTEGRATION_NAME
                value: dashdotdb-dvo
              - name: INTEGRATION_EXTRA_ARGS
                value: ""
              - name: GITHUB_API
                valueFrom:
                  configMapKeyRef:
                    name: app-interface
                    key: GITHUB_API
              - name: UNLEASH_API_URL
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: API_URL
              - name: UNLEASH_CLIENT_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: CLIENT_ACCESS_TOKEN
              - name: DASHDOTDB_SECRET
                valueFrom:
                  secretKeyRef:
                    name: dashdotdb
                    key: AUTH_VAULT_PATH
              volumeMounts:
              - name: qontract-reconcile-toml
                mountPath: /config
              resources:
                limits:
                  cpu: ${DASHDOTDB_DVO_CPU_LIMIT}
                  memory: ${DASHDOTDB_DVO_MEMORY_LIMIT}
                requests:
                  cpu: ${DASHDOTDB_DVO_CPU_REQUEST}
                  memory: ${DASHDOTDB_DVO_MEMORY_REQUEST}
            restartPolicy: Never
            volumes:
            - name: qontract-reconcile-toml
              secret:
                secretName: qontract-reconcile-toml
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: qontract-reconcile-dashdotdb-slo
    name: qontract-reconcile-dashdotdb-slo
  spec:
    schedule: "0 5 * * *"
    concurrencyPolicy: Replace
    successfulJobHistoryLimit: 3
    failedJobHistoryLimit: 1
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: int
              image: ${IMAGE}:${IMAGE_TAG}
              env:
              - name: RUN_ONCE
                value: 'true'
              - name: DRY_RUN
                value: ${DRY_RUN}
              - name: INTEGRATION_NAME
                value: dashdotdb-slo
              - name: INTEGRATION_EXTRA_ARGS
                value: ""
              - name: GITHUB_API
                valueFrom:
                  configMapKeyRef:
                    name: app-interface
                    key: GITHUB_API
              - name: UNLEASH_API_URL
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: API_URL
              - name: UNLEASH_CLIENT_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: CLIENT_ACCESS_TOKEN
              - name: DASHDOTDB_SECRET
                valueFrom:
                  secretKeyRef:
                    name: dashdotdb
                    key: AUTH_VAULT_PATH
              volumeMounts:
              - name: qontract-reconcile-toml
                mountPath: /config
              resources:
                limits:
                  cpu: ${DASHDOTDB_SLO_CPU_LIMIT}
                  memory: ${DASHDOTDB_SLO_MEMORY_LIMIT}
                requests:
                  cpu: ${DASHDOTDB_SLO_CPU_REQUEST}
                  memory: ${DASHDOTDB_SLO_MEMORY_REQUEST}
            restartPolicy: Never
            volumes:
            - name: qontract-reconcile-toml
              secret:
                secretName: qontract-reconcile-toml
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: qontract-reconcile-app-interface-reporter
    name: qontract-reconcile-app-interface-reporter
  spec:
    schedule: "0 1 1 * *"
    concurrencyPolicy: Replace
    successfulJobHistoryLimit: 3
    failedJobHistoryLimit: 1
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: int
              image: ${IMAGE}:${IMAGE_TAG}
              env:
              - name: RUN_ONCE
                value: 'true'
              - name: DRY_RUN
                value: ${DRY_RUN}
              - name: COMMAND_NAME
                value: app-interface-reporter
              - name: INTEGRATION_NAME
                value: app-interface-reporter
              - name: INTEGRATION_EXTRA_ARGS
                value: "--gitlab-project-id=${APP_INTERFACE_PROJECT_ID} --reports-path=/tmp/report"
              - name: GITHUB_API
                valueFrom:
                  configMapKeyRef:
                    name: app-interface
                    key: GITHUB_API
              - name: UNLEASH_API_URL
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: API_URL
              - name: UNLEASH_CLIENT_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: CLIENT_ACCESS_TOKEN
              - name: XDG_CACHE_HOME
                value: /tmp/.cache
              volumeMounts:
              - name: qontract-reconcile-toml
                mountPath: /config
              resources:
                limits:
                  cpu: ${APP_INTERFACE_REPORTER_CPU_LIMIT}
                  memory: ${APP_INTERFACE_REPORTER_MEMORY_LIMIT}
                requests:
                  cpu: ${APP_INTERFACE_REPORTER_CPU_REQUEST}
                  memory: ${APP_INTERFACE_REPORTER_MEMORY_REQUEST}
            restartPolicy: Never
            volumes:
            - name: qontract-reconcile-toml
              secret:
                secretName: qontract-reconcile-toml
- apiVersion: v1
  kind: Service
  metadata:
    name: qontract-reconcile
    labels:
      app: qontract-reconcile
  spec:
    ports:
      - protocol: TCP
        port: 80
        targetPort: 9090
        name: http
    selector:
      component: qontract-reconcile
parameters:
- name: IMAGE
  value: quay.io/app-sre/qontract-reconcile
- name: IMAGE_TAG
  value: latest
- name: BUSYBOX_IMAGE
  value: quay.io/app-sre/ubi8-ubi-minimal
- name: BUSYBOX_IMAGE_TAG
  value: latest
- name: BUSYBOX_IMAGE_PULL_POLICY
  value: Always
- name: FLUENTD_IMAGE
  value: quay.io/app-sre/fluentd
- name: FLUENTD_IMAGE_TAG
  value: latest
- name: FLUENTD_IMAGE_PULL_POLICY
  value: Always
- name: DRY_RUN
  value: --dry-run
- name: SLEEP_DURATION_SECS
  value: "300"
- name: APP_INTERFACE_SQS_SECRET_NAME
  value: app-interface-sqs
- name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
  value: app-sre
- name: APP_INTERFACE_PROJECT_ID
  value: "0"
- name: USER_ID
  value: dummy
- name: LOG_FILE
  value: "/fluentd/log/integration.log"
- name: SLACK_CHANNEL
  value: "sd-app-sre-reconcile-stage"
- name: SLACK_CHANNEL_TRIGGER
  value: "sd-app-sre-triggers-stage"
- name: SLACK_ICON_EMOJI
  value: ":bust_in_silhouette:"
- name: GITHUB_API
  value: 'http://github-mirror.github-mirror-stage.svc.cluster.local'
- name: CLOUDWATCH_SECRET
  value: app-interface-cloudwatch
- name: SENTRY_DSN
  value: ""
- name: SLOW_OC_RECONCILE_THRESHOLD
  value: "600"
- name: LOG_SLOW_OC_RECONCILE
  value: "false"
- name: USE_NATIVE_CLIENT
  value: ""
- name: INTERNAL_CERTIFICATES_IMAGE
  value: quay.io/app-sre/internal-redhat-ca
- name: INTERNAL_CERTIFICATES_IMAGE_TAG
  value: latest
- name: INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY
  value: Always
- name: SLACK_USERGROUPS_CPU_LIMIT
  value: 200m
- name: SLACK_USERGROUPS_MEMORY_LIMIT
  value: 400Mi
- name: SLACK_USERGROUPS_CPU_REQUEST
  value: 100m
- name: SLACK_USERGROUPS_MEMORY_REQUEST
  value: 200Mi
- name: OPENSHIFT_ROLEBINDINGS_CPU_LIMIT
  value: 200m
- name: OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT
  value: 720Mi
- name: OPENSHIFT_ROLEBINDINGS_CPU_REQUEST
  value: 100m
- name: OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST
  value: 550Mi
- name: OPENSHIFT_CLUSTERROLEBINDINGS_CPU_LIMIT
  value: 200m
- name: OPENSHIFT_CLUSTERROLEBINDINGS_MEMORY_LIMIT
  value: 500Mi
- name: OPENSHIFT_CLUSTERROLEBINDINGS_CPU_REQUEST
  value: 100m
- name: OPENSHIFT_CLUSTERROLEBINDINGS_MEMORY_REQUEST
  value: 350Mi
- name: OPENSHIFT_USERS_CPU_LIMIT
  value: 500m
- name: OPENSHIFT_USERS_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_USERS_CPU_REQUEST
  value: 400m
- name: OPENSHIFT_USERS_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_UPGRADE_WATCHER_CPU_LIMIT
  value: 500m
- name: OPENSHIFT_UPGRADE_WATCHER_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_UPGRADE_WATCHER_CPU_REQUEST
  value: 400m
- name: OPENSHIFT_UPGRADE_WATCHER_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_GROUPS_CPU_LIMIT
  value: 300m
- name: OPENSHIFT_GROUPS_MEMORY_LIMIT
  value: 780Mi
- name: OPENSHIFT_GROUPS_CPU_REQUEST
  value: 200m
- name: OPENSHIFT_GROUPS_MEMORY_REQUEST
  value: 600Mi
- name: OPENSHIFT_NAMESPACE_LABELS_CPU_LIMIT
  value: 200m
- name: OPENSHIFT_NAMESPACE_LABELS_MEMORY_LIMIT
  value: 800Mi
- name: OPENSHIFT_NAMESPACE_LABELS_CPU_REQUEST
  value: 100m
- name: OPENSHIFT_NAMESPACE_LABELS_MEMORY_REQUEST
  value: 600Mi
- name: OPENSHIFT_NAMESPACES_CPU_LIMIT
  value: 200m
- name: OPENSHIFT_NAMESPACES_MEMORY_LIMIT
  value: 800Mi
- name: OPENSHIFT_NAMESPACES_CPU_REQUEST
  value: 100m
- name: OPENSHIFT_NAMESPACES_MEMORY_REQUEST
  value: 600Mi
- name: OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT
  value: 250m
- name: OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT
  value: 700Mi
- name: OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST
  value: 150m
- name: OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST
  value: 500Mi
- name: OPENSHIFT_LIMITRANGES_CPU_LIMIT
  value: 300m
- name: OPENSHIFT_LIMITRANGES_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_LIMITRANGES_CPU_REQUEST
  value: 200m
- name: OPENSHIFT_LIMITRANGES_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_RESOURCES_CPU_LIMIT
  value: 1200m
- name: OPENSHIFT_RESOURCES_MEMORY_LIMIT
  value: 3600Mi
- name: OPENSHIFT_RESOURCES_CPU_REQUEST
  value: 900m
- name: OPENSHIFT_RESOURCES_MEMORY_REQUEST
  value: 1600Mi
- name: OPENSHIFT_VAULT_SECRETS_CPU_LIMIT
  value: 400m
- name: OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT
  value: 800Mi
- name: OPENSHIFT_VAULT_SECRETS_CPU_REQUEST
  value: 200m
- name: OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST
  value: 600Mi
- name: OPENSHIFT_ROUTES_CPU_LIMIT
  value: 300m
- name: OPENSHIFT_ROUTES_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_ROUTES_CPU_REQUEST
  value: 200m
- name: OPENSHIFT_ROUTES_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_SERVICEACCOUNT_TOKENS_CPU_LIMIT
  value: 400m
- name: OPENSHIFT_SERVICEACCOUNT_TOKENS_MEMORY_LIMIT
  value: 1000Mi
- name: OPENSHIFT_SERVICEACCOUNT_TOKENS_CPU_REQUEST
  value: 200m
- name: OPENSHIFT_SERVICEACCOUNT_TOKENS_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_CPU_LIMIT
  value: 600m
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_MEMORY_LIMIT
  value: 1000Mi
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_CPU_REQUEST
  value: 400m
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_CONFIGS_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_LIMIT
  value: 600m
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_LIMIT
  value: 1000Mi
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_CPU_REQUEST
  value: 400m
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_MOVING_COMMITS_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_CPU_LIMIT
  value: 600m
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_MEMORY_LIMIT
  value: 1000Mi
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_CPU_REQUEST
  value: 400m
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_UPSTREAM_JOBS_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_CLEANER_CPU_LIMIT
  value: 600m
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_CLEANER_MEMORY_LIMIT
  value: 1000Mi
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_CLEANER_CPU_REQUEST
  value: 400m
- name: OPENSHIFT_SAAS_DEPLOY_TRIGGER_CLEANER_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_TEKTON_RESOURCES_CPU_LIMIT
  value: 600m
- name: OPENSHIFT_TEKTON_RESOURCES_MEMORY_LIMIT
  value: 1000Mi
- name: OPENSHIFT_TEKTON_RESOURCES_CPU_REQUEST
  value: 400m
- name: OPENSHIFT_TEKTON_RESOURCES_MEMORY_REQUEST
  value: 800Mi
- name: TERRAFORM_RESOURCES_CPU_LIMIT
  value: 600m
- name: TERRAFORM_RESOURCES_MEMORY_LIMIT
  value: 1200Mi
- name: TERRAFORM_RESOURCES_CPU_REQUEST
  value: 300m
- name: TERRAFORM_RESOURCES_MEMORY_REQUEST
  value: 800Mi
- name: GITLAB_PROJECTS_CPU_LIMIT
  value: 200m
- name: GITLAB_PROJECTS_MEMORY_LIMIT
  value: 200Mi
- name: GITLAB_PROJECTS_CPU_REQUEST
  value: 100m
- name: GITLAB_PROJECTS_MEMORY_REQUEST
  value: 100Mi
- name: GITLAB_MEMBERS_CPU_LIMIT
  value: 200m
- name: GITLAB_MEMBERS_MEMORY_LIMIT
  value: 200Mi
- name: GITLAB_MEMBERS_CPU_REQUEST
  value: 100m
- name: GITLAB_MEMBERS_MEMORY_REQUEST
  value: 100Mi
- name: GITLAB_PERMISSIONS_CPU_LIMIT
  value: 200m
- name: GITLAB_PERMISSIONS_MEMORY_LIMIT
  value: 200Mi
- name: GITLAB_PERMISSIONS_CPU_REQUEST
  value: 100m
- name: GITLAB_PERMISSIONS_MEMORY_REQUEST
  value: 100Mi
- name: GITLAB_OWNERS_CPU_LIMIT
  value: 200m
- name: GITLAB_OWNERS_MEMORY_LIMIT
  value: 200Mi
- name: GITLAB_OWNERS_CPU_REQUEST
  value: 100m
- name: GITLAB_OWNERS_MEMORY_REQUEST
  value: 100Mi
- name: GITLAB_HOUSEKEEPING_SLEEP_DURATION_SECS
  value: "600"
- name: GITLAB_HOUSEKEEPING_CPU_LIMIT
  value: 200m
- name: GITLAB_HOUSEKEEPING_MEMORY_LIMIT
  value: 200Mi
- name: GITLAB_HOUSEKEEPING_CPU_REQUEST
  value: 100m
- name: GITLAB_HOUSEKEEPING_MEMORY_REQUEST
  value: 100Mi
- name: JENKINS_JOB_BUILDER_CPU_LIMIT
  value: 200m
- name: JENKINS_JOB_BUILDER_MEMORY_LIMIT
  value: 400Mi
- name: JENKINS_JOB_BUILDER_CPU_REQUEST
  value: 100m
- name: JENKINS_JOB_BUILDER_MEMORY_REQUEST
  value: 200Mi
- name: JENKINS_JOB_CLEANER_CPU_LIMIT
  value: 200m
- name: JENKINS_JOB_CLEANER_MEMORY_LIMIT
  value: 400Mi
- name: JENKINS_JOB_CLEANER_CPU_REQUEST
  value: 100m
- name: JENKINS_JOB_CLEANER_MEMORY_REQUEST
  value: 200Mi
- name: JENKINS_ROLES_CPU_LIMIT
  value: 200m
- name: JENKINS_ROLES_MEMORY_LIMIT
  value: 200Mi
- name: JENKINS_ROLES_CPU_REQUEST
  value: 100m
- name: JENKINS_ROLES_MEMORY_REQUEST
  value: 100Mi
- name: JENKINS_WEBHOOKS_CPU_LIMIT
  value: 200m
- name: JENKINS_WEBHOOKS_MEMORY_LIMIT
  value: 200Mi
- name: JENKINS_WEBHOOKS_CPU_REQUEST
  value: 100m
- name: JENKINS_WEBHOOKS_MEMORY_REQUEST
  value: 100Mi
- name: JENKINS_WEBHOOKS_CLEANER_CPU_LIMIT
  value: 200m
- name: JENKINS_WEBHOOKS_CLEANER_MEMORY_LIMIT
  value: 200Mi
- name: JENKINS_WEBHOOKS_CLEANER_CPU_REQUEST
  value: 100m
- name: JENKINS_WEBHOOKS_CLEANER_MEMORY_REQUEST
  value: 100Mi
- name: GITLAB_MR_SQS_CONSUMER_CPU_LIMIT
  value: 400m
- name: GITLAB_MR_SQS_CONSUMER_MEMORY_LIMIT
  value: 400Mi
- name: GITLAB_MR_SQS_CONSUMER_CPU_REQUEST
  value: 200m
- name: GITLAB_MR_SQS_CONSUMER_MEMORY_REQUEST
  value: 200Mi
- name: STATUS_PAGE_COMPONENTS_CPU_LIMIT
  value: 200m
- name: STATUS_PAGE_COMPONENTS_MEMORY_LIMIT
  value: 200Mi
- name: STATUS_PAGE_COMPONENTS_CPU_REQUEST
  value: 100m
- name: STATUS_PAGE_COMPONENTS_MEMORY_REQUEST
  value: 100Mi
- name: JENKINS_JOB_BUILDS_CLEANER_CPU_LIMIT
  value: 200m
- name: JENKINS_JOB_BUILDS_CLEANER_MEMORY_LIMIT
  value: 200Mi
- name: JENKINS_JOB_BUILDS_CLEANER_CPU_REQUEST
  value: 100m
- name: JENKINS_JOB_BUILDS_CLEANER_MEMORY_REQUEST
  value: 100Mi
- name: CLUSTER_DEPLOYMENT_MAPPER_CPU_LIMIT
  value: 300m
- name: CLUSTER_DEPLOYMENT_MAPPER_MEMORY_LIMIT
  value: 400Mi
- name: CLUSTER_DEPLOYMENT_MAPPER_CPU_REQUEST
  value: 200m
- name: CLUSTER_DEPLOYMENT_MAPPER_MEMORY_REQUEST
  value: 200Mi
- name: LDAP_USERS_CPU_LIMIT
  value: 200m
- name: LDAP_USERS_MEMORY_LIMIT
  value: 200Mi
- name: LDAP_USERS_CPU_REQUEST
  value: 100m
- name: LDAP_USERS_MEMORY_REQUEST
  value: 100Mi
- name: DASHDOTDB_CSO_CPU_LIMIT
  value: 200m
- name: DASHDOTDB_CSO_MEMORY_LIMIT
  value: 600Mi
- name: DASHDOTDB_CSO_CPU_REQUEST
  value: 100m
- name: DASHDOTDB_CSO_MEMORY_REQUEST
  value: 400Mi
- name: DASHDOTDB_DVO_CPU_LIMIT
  value: 200m
- name: DASHDOTDB_DVO_MEMORY_LIMIT
  value: 600Mi
- name: DASHDOTDB_DVO_CPU_REQUEST
  value: 100m
- name: DASHDOTDB_DVO_MEMORY_REQUEST
  value: 400Mi
- name: DASHDOTDB_SLO_CPU_LIMIT
  value: 200m
- name: DASHDOTDB_SLO_MEMORY_LIMIT
  value: 600Mi
- name: DASHDOTDB_SLO_CPU_REQUEST
  value: 100m
- name: DASHDOTDB_SLO_MEMORY_REQUEST
  value: 400Mi
- name: APP_INTERFACE_REPORTER_CPU_LIMIT
  value: 200m
- name: APP_INTERFACE_REPORTER_MEMORY_LIMIT
  value: 600Mi
- name: APP_INTERFACE_REPORTER_CPU_REQUEST
  value: 100m
- name: APP_INTERFACE_REPORTER_MEMORY_REQUEST
  value: 400Mi
