---
# Source: qontract-reconcile/templates/template.yaml
apiVersion: v1
kind: Template
metadata:
  name: qontract-reconcile
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-aws-iam-keys
    name: qontract-reconcile-aws-iam-keys
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-aws-iam-keys
    template:
      metadata:
        labels:
          app: qontract-reconcile-aws-iam-keys
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[aws-iam-keys] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name aws-iam-keys
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: aws-iam-keys
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${AWS_IAM_KEYS_CPU_LIMIT}
              memory: ${AWS_IAM_KEYS_MEMORY_LIMIT}
            requests:
              cpu: ${AWS_IAM_KEYS_CPU_REQUEST}
              memory: ${AWS_IAM_KEYS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-aws-iam-password-reset
    name: qontract-reconcile-aws-iam-password-reset
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-aws-iam-password-reset
    template:
      metadata:
        labels:
          app: qontract-reconcile-aws-iam-password-reset
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[aws-iam-password-reset] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name aws-iam-password-reset
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: aws-iam-password-reset
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${AWS_IAM_PASSWORD_RESET_CPU_LIMIT}
              memory: ${AWS_IAM_PASSWORD_RESET_MEMORY_LIMIT}
            requests:
              cpu: ${AWS_IAM_PASSWORD_RESET_CPU_REQUEST}
              memory: ${AWS_IAM_PASSWORD_RESET_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-dyn-traffic-director
    name: qontract-reconcile-dyn-traffic-director
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-dyn-traffic-director
    template:
      metadata:
        labels:
          app: qontract-reconcile-dyn-traffic-director
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[dyn-traffic-director] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name dyn-traffic-director
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: dyn-traffic-director
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${DYN_TRAFFIC_DIRECTOR_CPU_LIMIT}
              memory: ${DYN_TRAFFIC_DIRECTOR_MEMORY_LIMIT}
            requests:
              cpu: ${DYN_TRAFFIC_DIRECTOR_CPU_REQUEST}
              memory: ${DYN_TRAFFIC_DIRECTOR_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-github
    name: qontract-reconcile-github
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-github
    template:
      metadata:
        labels:
          app: qontract-reconcile-github
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[github] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name github
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: github
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${GITHUB_CPU_LIMIT}
              memory: ${GITHUB_MEMORY_LIMIT}
            requests:
              cpu: ${GITHUB_CPU_REQUEST}
              memory: ${GITHUB_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-github-owners
    name: qontract-reconcile-github-owners
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-github-owners
    template:
      metadata:
        labels:
          app: qontract-reconcile-github-owners
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[github-owners] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name github-owners
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: github-owners
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${GITHUB_OWNERS_CPU_LIMIT}
              memory: ${GITHUB_OWNERS_MEMORY_LIMIT}
            requests:
              cpu: ${GITHUB_OWNERS_CPU_REQUEST}
              memory: ${GITHUB_OWNERS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-github-repo-invites
    name: qontract-reconcile-github-repo-invites
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-github-repo-invites
    template:
      metadata:
        labels:
          app: qontract-reconcile-github-repo-invites
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[github-repo-invites] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name github-repo-invites
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: github-repo-invites
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${GITHUB_REPO_INVITES_CPU_LIMIT}
              memory: ${GITHUB_REPO_INVITES_MEMORY_LIMIT}
            requests:
              cpu: ${GITHUB_REPO_INVITES_CPU_REQUEST}
              memory: ${GITHUB_REPO_INVITES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-quay-membership
    name: qontract-reconcile-quay-membership
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-quay-membership
    template:
      metadata:
        labels:
          app: qontract-reconcile-quay-membership
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[quay-membership] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name quay-membership
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: quay-membership
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${QUAY_MEMBERSHIP_CPU_LIMIT}
              memory: ${QUAY_MEMBERSHIP_MEMORY_LIMIT}
            requests:
              cpu: ${QUAY_MEMBERSHIP_CPU_REQUEST}
              memory: ${QUAY_MEMBERSHIP_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-quay-mirror
    name: qontract-reconcile-quay-mirror
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-quay-mirror
    template:
      metadata:
        labels:
          app: qontract-reconcile-quay-mirror
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name quay-mirror
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: quay-mirror
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${QUAY_MIRROR_SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${QUAY_MIRROR_CPU_LIMIT}
              memory: ${QUAY_MIRROR_MEMORY_LIMIT}
            requests:
              cpu: ${QUAY_MIRROR_CPU_REQUEST}
              memory: ${QUAY_MIRROR_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-quay-mirror-org
    name: qontract-reconcile-quay-mirror-org
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-quay-mirror-org
    template:
      metadata:
        labels:
          app: qontract-reconcile-quay-mirror-org
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name quay-mirror-org
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: quay-mirror-org
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${QUAY_MIRROR_ORG_CPU_LIMIT}
              memory: ${QUAY_MIRROR_ORG_MEMORY_LIMIT}
            requests:
              cpu: ${QUAY_MIRROR_ORG_CPU_REQUEST}
              memory: ${QUAY_MIRROR_ORG_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-gcr-mirror
    name: qontract-reconcile-gcr-mirror
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-gcr-mirror
    template:
      metadata:
        labels:
          app: qontract-reconcile-gcr-mirror
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name gcr-mirror
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: gcr-mirror
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${GCR_MIRROR_CPU_LIMIT}
              memory: ${GCR_MIRROR_MEMORY_LIMIT}
            requests:
              cpu: ${GCR_MIRROR_CPU_REQUEST}
              memory: ${GCR_MIRROR_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ecr-mirror
    name: qontract-reconcile-ecr-mirror
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ecr-mirror
    template:
      metadata:
        labels:
          app: qontract-reconcile-ecr-mirror
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ecr-mirror
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ecr-mirror
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${ECR_MIRROR_CPU_LIMIT}
              memory: ${ECR_MIRROR_MEMORY_LIMIT}
            requests:
              cpu: ${ECR_MIRROR_CPU_REQUEST}
              memory: ${ECR_MIRROR_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-quay-repos
    name: qontract-reconcile-quay-repos
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-quay-repos
    template:
      metadata:
        labels:
          app: qontract-reconcile-quay-repos
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[quay-repos] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name quay-repos
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: quay-repos
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${QUAY_REPOS_CPU_LIMIT}
              memory: ${QUAY_REPOS_MEMORY_LIMIT}
            requests:
              cpu: ${QUAY_REPOS_CPU_REQUEST}
              memory: ${QUAY_REPOS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-quay-permissions
    name: qontract-reconcile-quay-permissions
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-quay-permissions
    template:
      metadata:
        labels:
          app: qontract-reconcile-quay-permissions
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[quay-permissions] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name quay-permissions
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: quay-permissions
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${QUAY_PERMISSIONS_CPU_LIMIT}
              memory: ${QUAY_PERMISSIONS_MEMORY_LIMIT}
            requests:
              cpu: ${QUAY_PERMISSIONS_CPU_REQUEST}
              memory: ${QUAY_PERMISSIONS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-jira-watcher
    name: qontract-reconcile-jira-watcher
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-jira-watcher
    template:
      metadata:
        labels:
          app: qontract-reconcile-jira-watcher
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name jira-watcher
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: jira-watcher
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${JIRA_WATCHER_CPU_LIMIT}
              memory: ${JIRA_WATCHER_MEMORY_LIMIT}
            requests:
              cpu: ${JIRA_WATCHER_CPU_REQUEST}
              memory: ${JIRA_WATCHER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-unleash-watcher
    name: qontract-reconcile-unleash-watcher
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-unleash-watcher
    template:
      metadata:
        labels:
          app: qontract-reconcile-unleash-watcher
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name unleash-watcher
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: unleash-watcher
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${UNLEASH_WATCHER_CPU_LIMIT}
              memory: ${UNLEASH_WATCHER_MEMORY_LIMIT}
            requests:
              cpu: ${UNLEASH_WATCHER_CPU_REQUEST}
              memory: ${UNLEASH_WATCHER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-aws-support-cases-sos
    name: qontract-reconcile-aws-support-cases-sos
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-aws-support-cases-sos
    template:
      metadata:
        labels:
          app: qontract-reconcile-aws-support-cases-sos
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name aws-support-cases-sos
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: aws-support-cases-sos
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          - name: gitlab_pr_submitter_queue_url
            valueFrom:
              secretKeyRef:
                name: ${APP_INTERFACE_SQS_SECRET_NAME}
                key: gitlab_pr_submitter_queue_url
          resources:
            limits:
              cpu: ${AWS_SUPPORT_CASES_SOS_CPU_LIMIT}
              memory: ${AWS_SUPPORT_CASES_SOS_MEMORY_LIMIT}
            requests:
              cpu: ${AWS_SUPPORT_CASES_SOS_CPU_REQUEST}
              memory: ${AWS_SUPPORT_CASES_SOS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-users
    name: qontract-reconcile-openshift-users
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-users
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-users
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-users] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-users
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-users
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_USERS_CPU_LIMIT}
              memory: ${OPENSHIFT_USERS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_USERS_CPU_REQUEST}
              memory: ${OPENSHIFT_USERS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-groups
    name: qontract-reconcile-openshift-groups-0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-groups
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-groups
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-groups] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-groups
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-groups
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_GROUPS_CPU_LIMIT}
              memory: ${OPENSHIFT_GROUPS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_GROUPS_CPU_REQUEST}
              memory: ${OPENSHIFT_GROUPS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-groups
    name: qontract-reconcile-openshift-groups-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-groups
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-groups
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-groups] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-groups
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "1"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-groups
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_GROUPS_CPU_LIMIT}
              memory: ${OPENSHIFT_GROUPS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_GROUPS_CPU_REQUEST}
              memory: ${OPENSHIFT_GROUPS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-groups
    name: qontract-reconcile-openshift-groups-2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-groups
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-groups
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-groups] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-groups
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "2"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-groups
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_GROUPS_CPU_LIMIT}
              memory: ${OPENSHIFT_GROUPS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_GROUPS_CPU_REQUEST}
              memory: ${OPENSHIFT_GROUPS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-groups
    name: qontract-reconcile-openshift-groups-3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-groups
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-groups
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-groups] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-groups
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "3"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-groups
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_GROUPS_CPU_LIMIT}
              memory: ${OPENSHIFT_GROUPS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_GROUPS_CPU_REQUEST}
              memory: ${OPENSHIFT_GROUPS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-groups
    name: qontract-reconcile-openshift-groups-4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-groups
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-groups
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-groups] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-groups
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "4"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-groups
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_GROUPS_CPU_LIMIT}
              memory: ${OPENSHIFT_GROUPS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_GROUPS_CPU_REQUEST}
              memory: ${OPENSHIFT_GROUPS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-namespace-labels
    name: qontract-reconcile-openshift-namespace-labels
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-namespace-labels
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-namespace-labels
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-namespace-labels] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-namespace-labels
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-namespace-labels
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NAMESPACE_LABELS_CPU_LIMIT}
              memory: ${OPENSHIFT_NAMESPACE_LABELS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NAMESPACE_LABELS_CPU_REQUEST}
              memory: ${OPENSHIFT_NAMESPACE_LABELS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-namespaces
    name: qontract-reconcile-openshift-namespaces
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-namespaces
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-namespaces
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-namespaces] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-namespaces
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-namespaces
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NAMESPACES_CPU_LIMIT}
              memory: ${OPENSHIFT_NAMESPACES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NAMESPACES_CPU_REQUEST}
              memory: ${OPENSHIFT_NAMESPACES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-clusterrolebindings
    name: qontract-reconcile-openshift-clusterrolebindings
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-clusterrolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-clusterrolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-clusterrolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-clusterrolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-clusterrolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_CLUSTERROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_CLUSTERROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_CLUSTERROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_CLUSTERROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "1"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "2"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "3"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "4"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-5
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "5"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-6
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "6"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-7
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "7"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-8
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "8"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-9
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "9"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-10
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "10"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-11
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "11"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-12
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "12"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-13
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "13"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-rolebindings
    name: qontract-reconcile-openshift-rolebindings-14
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-rolebindings
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-rolebindings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-rolebindings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-rolebindings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "15"
          - name: SHARD_ID
            value: "14"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-rolebindings
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_LIMIT}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROLEBINDINGS_CPU_REQUEST}
              memory: ${OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies-0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "10"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "10"
          - name: SHARD_ID
            value: "1"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies-2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "10"
          - name: SHARD_ID
            value: "2"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies-3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "10"
          - name: SHARD_ID
            value: "3"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies-4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "10"
          - name: SHARD_ID
            value: "4"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies-5
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "10"
          - name: SHARD_ID
            value: "5"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies-6
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "10"
          - name: SHARD_ID
            value: "6"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies-7
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "10"
          - name: SHARD_ID
            value: "7"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies-8
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "10"
          - name: SHARD_ID
            value: "8"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-network-policies
    name: qontract-reconcile-openshift-network-policies-9
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-network-policies
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-network-policies
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-network-policies] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-network-policies
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "10"
          - name: SHARD_ID
            value: "9"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-network-policies
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST}
              memory: ${OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-limitranges
    name: qontract-reconcile-openshift-limitranges
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-limitranges
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-limitranges
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-limitranges] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-limitranges
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-limitranges
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_LIMITRANGES_CPU_LIMIT}
              memory: ${OPENSHIFT_LIMITRANGES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_LIMITRANGES_CPU_REQUEST}
              memory: ${OPENSHIFT_LIMITRANGES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resourcequotas
    name: qontract-reconcile-openshift-resourcequotas
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resourcequotas
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resourcequotas
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resourcequotas
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resourcequotas
          - name: INTEGRATION_EXTRA_ARGS
            value: "--no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCEQUOTAS_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCEQUOTAS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCEQUOTAS_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCEQUOTAS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "1"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "2"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "3"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "4"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-5
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "5"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-6
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "6"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-7
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "7"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-8
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "8"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-9
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "9"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-10
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "10"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-11
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "11"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-12
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "12"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-13
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "13"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-14
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "14"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-15
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "15"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-16
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "16"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-17
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "17"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-18
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "18"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-resources
    name: qontract-reconcile-openshift-resources-19
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-resources
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-resources
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[openshift-resources] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-resources
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "19"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-resources
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_RESOURCES_CPU_LIMIT}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_RESOURCES_CPU_REQUEST}
              memory: ${OPENSHIFT_RESOURCES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "1"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "2"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "3"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "4"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-5
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "5"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-6
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "6"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-7
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "7"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-8
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "8"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-9
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "9"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-10
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "10"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-11
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "11"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-12
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "12"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-13
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "13"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-14
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "14"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-15
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "15"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-16
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "16"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-17
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "17"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-18
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "18"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-vault-secrets
    name: qontract-reconcile-openshift-vault-secrets-19
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-vault-secrets
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-vault-secrets
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-vault-secrets
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "20"
          - name: SHARD_ID
            value: "19"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-vault-secrets
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_LIMIT}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_VAULT_SECRETS_CPU_REQUEST}
              memory: ${OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-routes
    name: qontract-reconcile-openshift-routes-0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-routes
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-routes
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-routes
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-routes
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROUTES_CPU_LIMIT}
              memory: ${OPENSHIFT_ROUTES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROUTES_CPU_REQUEST}
              memory: ${OPENSHIFT_ROUTES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-routes
    name: qontract-reconcile-openshift-routes-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-routes
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-routes
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-routes
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "1"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-routes
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROUTES_CPU_LIMIT}
              memory: ${OPENSHIFT_ROUTES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROUTES_CPU_REQUEST}
              memory: ${OPENSHIFT_ROUTES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-routes
    name: qontract-reconcile-openshift-routes-2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-routes
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-routes
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-routes
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "2"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-routes
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROUTES_CPU_LIMIT}
              memory: ${OPENSHIFT_ROUTES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROUTES_CPU_REQUEST}
              memory: ${OPENSHIFT_ROUTES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-routes
    name: qontract-reconcile-openshift-routes-3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-routes
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-routes
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-routes
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "3"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-routes
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROUTES_CPU_LIMIT}
              memory: ${OPENSHIFT_ROUTES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROUTES_CPU_REQUEST}
              memory: ${OPENSHIFT_ROUTES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-openshift-routes
    name: qontract-reconcile-openshift-routes-4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-openshift-routes
    template:
      metadata:
        labels:
          app: qontract-reconcile-openshift-routes
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name openshift-routes
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "5"
          - name: SHARD_ID
            value: "4"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: openshift-routes
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OPENSHIFT_ROUTES_CPU_LIMIT}
              memory: ${OPENSHIFT_ROUTES_MEMORY_LIMIT}
            requests:
              cpu: ${OPENSHIFT_ROUTES_CPU_REQUEST}
              memory: ${OPENSHIFT_ROUTES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-aws-route53
    name: qontract-reconcile-terraform-aws-route53
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-aws-route53
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-aws-route53
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-aws-route53] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-aws-route53
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-aws-route53
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_AWS_ROUTE53_CPU_LIMIT}
              memory: ${TERRAFORM_AWS_ROUTE53_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_AWS_ROUTE53_CPU_REQUEST}
              memory: ${TERRAFORM_AWS_ROUTE53_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "1"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "2"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "3"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "4"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-5
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "5"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-6
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "6"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-7
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "7"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-8
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "8"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-9
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "9"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-10
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "10"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-11
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "11"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-resources-wrapper
    name: qontract-reconcile-terraform-resources-wrapper-12
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-resources-wrapper
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-resources-wrapper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-resources-wrapper] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-resources-wrapper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "13"
          - name: SHARD_ID
            value: "12"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-resources-wrapper
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host --vault-output-path app-sre/integrations-output"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST}
              memory: ${TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-users
    name: qontract-reconcile-terraform-users
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-users
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-users
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-users] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-users
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-users
          - name: INTEGRATION_EXTRA_ARGS
            value: "--io-dir /tmp/throughput/"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_USERS_CPU_LIMIT}
              memory: ${TERRAFORM_USERS_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_USERS_CPU_REQUEST}
              memory: ${TERRAFORM_USERS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-vpc-peerings
    name: qontract-reconcile-terraform-vpc-peerings
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-vpc-peerings
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-vpc-peerings
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-vpc-peerings] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-vpc-peerings
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-vpc-peerings
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_VPC_PEERINGS_CPU_LIMIT}
              memory: ${TERRAFORM_VPC_PEERINGS_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_VPC_PEERINGS_CPU_REQUEST}
              memory: ${TERRAFORM_VPC_PEERINGS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-terraform-tgw-attachments
    name: qontract-reconcile-terraform-tgw-attachments
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-terraform-tgw-attachments
    template:
      metadata:
        labels:
          app: qontract-reconcile-terraform-tgw-attachments
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[terraform-tgw-attachments] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name terraform-tgw-attachments
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: terraform-tgw-attachments
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${TERRAFORM_TGW_ATTACHMENTS_CPU_LIMIT}
              memory: ${TERRAFORM_TGW_ATTACHMENTS_MEMORY_LIMIT}
            requests:
              cpu: ${TERRAFORM_TGW_ATTACHMENTS_CPU_REQUEST}
              memory: ${TERRAFORM_TGW_ATTACHMENTS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ocm-addons
    name: qontract-reconcile-ocm-addons
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ocm-addons
    template:
      metadata:
        labels:
          app: qontract-reconcile-ocm-addons
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[ocm-addons] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ocm-addons
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ocm-addons
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OCM_ADDONS_CPU_LIMIT}
              memory: ${OCM_ADDONS_MEMORY_LIMIT}
            requests:
              cpu: ${OCM_ADDONS_CPU_REQUEST}
              memory: ${OCM_ADDONS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ocm-groups
    name: qontract-reconcile-ocm-groups
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ocm-groups
    template:
      metadata:
        labels:
          app: qontract-reconcile-ocm-groups
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[ocm-groups] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ocm-groups
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ocm-groups
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OCM_GROUPS_CPU_LIMIT}
              memory: ${OCM_GROUPS_MEMORY_LIMIT}
            requests:
              cpu: ${OCM_GROUPS_CPU_REQUEST}
              memory: ${OCM_GROUPS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ocm-clusters
    name: qontract-reconcile-ocm-clusters
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ocm-clusters
    template:
      metadata:
        labels:
          app: qontract-reconcile-ocm-clusters
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[ocm-clusters] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ocm-clusters
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ocm-clusters
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          - name: gitlab_pr_submitter_queue_url
            valueFrom:
              secretKeyRef:
                name: ${APP_INTERFACE_SQS_SECRET_NAME}
                key: gitlab_pr_submitter_queue_url
          resources:
            limits:
              cpu: ${OCM_CLUSTERS_CPU_LIMIT}
              memory: ${OCM_CLUSTERS_MEMORY_LIMIT}
            requests:
              cpu: ${OCM_CLUSTERS_CPU_REQUEST}
              memory: ${OCM_CLUSTERS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ocm-aws-infrastructure-access
    name: qontract-reconcile-ocm-aws-infrastructure-access
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ocm-aws-infrastructure-access
    template:
      metadata:
        labels:
          app: qontract-reconcile-ocm-aws-infrastructure-access
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[ocm-aws-infrastructure-access] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ocm-aws-infrastructure-access
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ocm-aws-infrastructure-access
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${OCM_AWS_INFRASTRUCTURE_ACCESS_SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OCM_AWS_INFRASTRUCTURE_ACCESS_CPU_LIMIT}
              memory: ${OCM_AWS_INFRASTRUCTURE_ACCESS_MEMORY_LIMIT}
            requests:
              cpu: ${OCM_AWS_INFRASTRUCTURE_ACCESS_CPU_REQUEST}
              memory: ${OCM_AWS_INFRASTRUCTURE_ACCESS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ocm-github-idp
    name: qontract-reconcile-ocm-github-idp
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ocm-github-idp
    template:
      metadata:
        labels:
          app: qontract-reconcile-ocm-github-idp
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[ocm-github-idp] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ocm-github-idp
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ocm-github-idp
          - name: INTEGRATION_EXTRA_ARGS
            value: "--vault-input-path app-sre/integrations-input"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OCM_GITHUB_IDP_CPU_LIMIT}
              memory: ${OCM_GITHUB_IDP_MEMORY_LIMIT}
            requests:
              cpu: ${OCM_GITHUB_IDP_CPU_REQUEST}
              memory: ${OCM_GITHUB_IDP_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ocm-machine-pools
    name: qontract-reconcile-ocm-machine-pools
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ocm-machine-pools
    template:
      metadata:
        labels:
          app: qontract-reconcile-ocm-machine-pools
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[ocm-machine-pools] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ocm-machine-pools
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ocm-machine-pools
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OCM_MACHINE_POOLS_CPU_LIMIT}
              memory: ${OCM_MACHINE_POOLS_MEMORY_LIMIT}
            requests:
              cpu: ${OCM_MACHINE_POOLS_CPU_REQUEST}
              memory: ${OCM_MACHINE_POOLS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ocm-upgrade-scheduler
    name: qontract-reconcile-ocm-upgrade-scheduler
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ocm-upgrade-scheduler
    template:
      metadata:
        labels:
          app: qontract-reconcile-ocm-upgrade-scheduler
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[ocm-upgrade-scheduler] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ocm-upgrade-scheduler
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ocm-upgrade-scheduler
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OCM_UPGRADE_SCHEDULER_CPU_LIMIT}
              memory: ${OCM_UPGRADE_SCHEDULER_MEMORY_LIMIT}
            requests:
              cpu: ${OCM_UPGRADE_SCHEDULER_CPU_REQUEST}
              memory: ${OCM_UPGRADE_SCHEDULER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ocm-external-configuration-labels
    name: qontract-reconcile-ocm-external-configuration-labels
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ocm-external-configuration-labels
    template:
      metadata:
        labels:
          app: qontract-reconcile-ocm-external-configuration-labels
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[ocm-external-configuration-labels] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ocm-external-configuration-labels
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ocm-external-configuration-labels
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OCM_EXTERNAL_CONFIGURATION_LABELS_CPU_LIMIT}
              memory: ${OCM_EXTERNAL_CONFIGURATION_LABELS_MEMORY_LIMIT}
            requests:
              cpu: ${OCM_EXTERNAL_CONFIGURATION_LABELS_CPU_REQUEST}
              memory: ${OCM_EXTERNAL_CONFIGURATION_LABELS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ocm-additional-routers
    name: qontract-reconcile-ocm-additional-routers
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ocm-additional-routers
    template:
      metadata:
        labels:
          app: qontract-reconcile-ocm-additional-routers
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[ocm-additional-routers] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ocm-additional-routers
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ocm-additional-routers
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OCM_ADDITIONAL_ROUTERS_CPU_LIMIT}
              memory: ${OCM_ADDITIONAL_ROUTERS_MEMORY_LIMIT}
            requests:
              cpu: ${OCM_ADDITIONAL_ROUTERS_CPU_REQUEST}
              memory: ${OCM_ADDITIONAL_ROUTERS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-kafka-clusters
    name: qontract-reconcile-kafka-clusters
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-kafka-clusters
    template:
      metadata:
        labels:
          app: qontract-reconcile-kafka-clusters
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[kafka-clusters] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name kafka-clusters
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: kafka-clusters
          - name: INTEGRATION_EXTRA_ARGS
            value: "--vault-throughput-path app-sre/integrations-throughput"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${KAFKA_CLUSTERS_CPU_LIMIT}
              memory: ${KAFKA_CLUSTERS_MEMORY_LIMIT}
            requests:
              cpu: ${KAFKA_CLUSTERS_CPU_REQUEST}
              memory: ${KAFKA_CLUSTERS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-email-sender
    name: qontract-reconcile-email-sender
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-email-sender
    template:
      metadata:
        labels:
          app: qontract-reconcile-email-sender
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[email-sender] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name email-sender
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: email-sender
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${EMAIL_SENDER_CPU_LIMIT}
              memory: ${EMAIL_SENDER_MEMORY_LIMIT}
            requests:
              cpu: ${EMAIL_SENDER_CPU_REQUEST}
              memory: ${EMAIL_SENDER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-requests-sender
    name: qontract-reconcile-requests-sender
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-requests-sender
    template:
      metadata:
        labels:
          app: qontract-reconcile-requests-sender
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[requests-sender] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name requests-sender
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: requests-sender
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${REQUESTS_SENDER_CPU_LIMIT}
              memory: ${REQUESTS_SENDER_MEMORY_LIMIT}
            requests:
              cpu: ${REQUESTS_SENDER_CPU_REQUEST}
              memory: ${REQUESTS_SENDER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-sentry-config
    name: qontract-reconcile-sentry-config
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-sentry-config
    template:
      metadata:
        labels:
          app: qontract-reconcile-sentry-config
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name sentry-config
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: sentry-config
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${SENTRY_CONFIG_CPU_LIMIT}
              memory: ${SENTRY_CONFIG_MEMORY_LIMIT}
            requests:
              cpu: ${SENTRY_CONFIG_CPU_REQUEST}
              memory: ${SENTRY_CONFIG_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-sentry-helper
    name: qontract-reconcile-sentry-helper
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-sentry-helper
    template:
      metadata:
        labels:
          app: qontract-reconcile-sentry-helper
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name sentry-helper
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: sentry-helper
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${SENTRY_HELPER_CPU_LIMIT}
              memory: ${SENTRY_HELPER_MEMORY_LIMIT}
            requests:
              cpu: ${SENTRY_HELPER_CPU_REQUEST}
              memory: ${SENTRY_HELPER_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-sql-query
    name: qontract-reconcile-sql-query
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-sql-query
    template:
      metadata:
        labels:
          app: qontract-reconcile-sql-query
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[sql-query] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name sql-query
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: sql-query
          - name: INTEGRATION_EXTRA_ARGS
            value: "--enable-deletion"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: APP_INTERFACE_STATE_BUCKET
            valueFrom:
              secretKeyRef:
                name: app-interface
                key: aws.s3.bucket
          - name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
            value: "${APP_INTERFACE_STATE_BUCKET_ACCOUNT}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${SQL_QUERY_CPU_LIMIT}
              memory: ${SQL_QUERY_MEMORY_LIMIT}
            requests:
              cpu: ${SQL_QUERY_CPU_REQUEST}
              memory: ${SQL_QUERY_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-slack-cluster-usergroups
    name: qontract-reconcile-slack-cluster-usergroups
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-slack-cluster-usergroups
    template:
      metadata:
        labels:
          app: qontract-reconcile-slack-cluster-usergroups
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[slack-cluster-usergroups] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name slack-cluster-usergroups
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: slack-cluster-usergroups
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${SLACK_CLUSTER_USERGROUPS_CPU_LIMIT}
              memory: ${SLACK_CLUSTER_USERGROUPS_MEMORY_LIMIT}
            requests:
              cpu: ${SLACK_CLUSTER_USERGROUPS_CPU_REQUEST}
              memory: ${SLACK_CLUSTER_USERGROUPS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-ocp-release-mirror
    name: qontract-reconcile-ocp-release-mirror
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-ocp-release-mirror
    template:
      metadata:
        labels:
          app: qontract-reconcile-ocp-release-mirror
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name ocp-release-mirror
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: ocp-release-mirror
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${OCP_RELEASE_MIRROR_CPU_LIMIT}
              memory: ${OCP_RELEASE_MIRROR_MEMORY_LIMIT}
            requests:
              cpu: ${OCP_RELEASE_MIRROR_CPU_REQUEST}
              memory: ${OCP_RELEASE_MIRROR_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-sendgrid-teammates
    name: qontract-reconcile-sendgrid-teammates
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-sendgrid-teammates
    template:
      metadata:
        labels:
          app: qontract-reconcile-sendgrid-teammates
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[sendgrid-teammates] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name sendgrid-teammates
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: sendgrid-teammates
          - name: INTEGRATION_EXTRA_ARGS
            value: ""
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${SENDGRID_TEAMMATES_CPU_LIMIT}
              memory: ${SENDGRID_TEAMMATES_MEMORY_LIMIT}
            requests:
              cpu: ${SENDGRID_TEAMMATES_CPU_REQUEST}
              memory: ${SENDGRID_TEAMMATES_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-gabi-authorized-users
    name: qontract-reconcile-gabi-authorized-users
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-gabi-authorized-users
    template:
      metadata:
        labels:
          app: qontract-reconcile-gabi-authorized-users
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack.webhook_url
                name: app-interface
          - name: SLACK_CHANNEL
            value: ${SLACK_CHANNEL}
          - name: SLACK_ICON_EMOJI
            value: ${SLACK_ICON_EMOJI}
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type slack
                webhook_url ${SLACK_WEBHOOK_URL}
                channel ${SLACK_CHANNEL}
                icon_emoji ${SLACK_ICON_EMOJI}
                username sd-app-sre-bot
                flush_interval 10s
                message "\`\`\`[gabi-authorized-users] %s\`\`\`"
              </store>
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name gabi-authorized-users
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: gabi-authorized-users
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${GABI_AUTHORIZED_USERS_CPU_LIMIT}
              memory: ${GABI_AUTHORIZED_USERS_MEMORY_LIMIT}
            requests:
              cpu: ${GABI_AUTHORIZED_USERS_CPU_REQUEST}
              memory: ${GABI_AUTHORIZED_USERS_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: qontract-reconcile-blackbox-exporter-endpoint-monitoring
    name: qontract-reconcile-blackbox-exporter-endpoint-monitoring
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: qontract-reconcile-blackbox-exporter-endpoint-monitoring
    template:
      metadata:
        labels:
          app: qontract-reconcile-blackbox-exporter-endpoint-monitoring
          component: qontract-reconcile
      spec:
        serviceAccountName: qontract-reconcile
        initContainers:
        - name: config
          image: ${BUSYBOX_IMAGE}:${BUSYBOX_IMAGE_TAG}
          imagePullPolicy: ${BUSYBOX_IMAGE_PULL_POLICY}
          resources:
            requests:
              memory: 10Mi
              cpu: 15m
            limits:
              memory: 20Mi
              cpu: 25m
          env:
          - name: LOG_GROUP_NAME
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: log_group_name
          command: ["/bin/sh", "-c"]
          args:
          - |
            # generate fluent.conf
            cat > /fluentd/etc/fluent.conf <<EOF
            <source>
              @type tail
              path /fluentd/log/integration.log
              pos_file /fluentd/log/integration.log.pos
              tag integration
              <parse>
                @type none
              </parse>
            </source>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /using gql endpoint/
              </exclude>
            </filter>

            <filter integration>
              @type grep
              <exclude>
                key message
                pattern /Certificate did not match expected hostname/
              </exclude>
            </filter>

            <match integration>
              @type copy
              <store>
                @type cloudwatch_logs
                log_group_name ${LOG_GROUP_NAME}
                log_stream_name blackbox-exporter-endpoint-monitoring
                auto_create_stream true
              </store>
            </match>
            EOF
          volumeMounts:
          - name: fluentd-config
            mountPath: /fluentd/etc/
        containers:
        - name: int
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
            - name: http
              containerPort: 9090
          env:
          - name: SHARDS
            value: "1"
          - name: SHARD_ID
            value: "0"
          - name: DRY_RUN
            value: ${DRY_RUN}
          - name: INTEGRATION_NAME
            value: blackbox-exporter-endpoint-monitoring
          - name: INTEGRATION_EXTRA_ARGS
            value: "--external --no-use-jump-host"
          - name: SLEEP_DURATION_SECS
            value: ${SLEEP_DURATION_SECS}
          - name: GITHUB_API
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: GITHUB_API
          - name: SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: app-interface
                key: SENTRY_DSN
          - name: LOG_FILE
            value: "${LOG_FILE}"
          - name: UNLEASH_API_URL
            valueFrom:
              secretKeyRef:
                name: unleash
                key: API_URL
          - name: UNLEASH_CLIENT_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: unleash
                key: CLIENT_ACCESS_TOKEN
          - name: SLOW_OC_RECONCILE_THRESHOLD
            value: "${SLOW_OC_RECONCILE_THRESHOLD}"
          - name: LOG_SLOW_OC_RECONCILE
            value: "${LOG_SLOW_OC_RECONCILE}"
          - name: USE_NATIVE_CLIENT
            value: "${USE_NATIVE_CLIENT}"
          resources:
            limits:
              cpu: ${BLACKBOX_EXPORTER_ENDPOINT_MONITORING_CPU_LIMIT}
              memory: ${BLACKBOX_EXPORTER_ENDPOINT_MONITORING_MEMORY_LIMIT}
            requests:
              cpu: ${BLACKBOX_EXPORTER_ENDPOINT_MONITORING_CPU_REQUEST}
              memory: ${BLACKBOX_EXPORTER_ENDPOINT_MONITORING_MEMORY_REQUEST}
          volumeMounts:
          - name: qontract-reconcile-toml
            mountPath: /config
          - name: logs
            mountPath: /fluentd/log/
        - name: fluentd
          image: ${FLUENTD_IMAGE}:${FLUENTD_IMAGE_TAG}
          imagePullPolicy: ${FLUENTD_IMAGE_PULL_POLICY}
          env:
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_region
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${CLOUDWATCH_SECRET}
                key: aws_secret_access_key
          resources:
            requests:
              memory: 30Mi
              cpu: 15m
            limits:
              memory: 120Mi
              cpu: 25m
          volumeMounts:
          - name: logs
            mountPath: /fluentd/log/
          - name: fluentd-config
            mountPath: /fluentd/etc/
        volumes:
        - name: qontract-reconcile-toml
          secret:
            secretName: qontract-reconcile-toml
        - name: logs
          emptyDir: {}
        - name: fluentd-config
          emptyDir: {}
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: qontract-reconcile-aws-ecr-image-pull-secrets
    name: qontract-reconcile-aws-ecr-image-pull-secrets
  spec:
    schedule: "0 */2 * * *"
    concurrencyPolicy: Allow
    successfulJobHistoryLimit: 3
    failedJobHistoryLimit: 1
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: int
              image: ${IMAGE}:${IMAGE_TAG}
              env:
              - name: RUN_ONCE
                value: 'true'
              - name: DRY_RUN
                value: ${DRY_RUN}
              - name: INTEGRATION_NAME
                value: aws-ecr-image-pull-secrets
              - name: INTEGRATION_EXTRA_ARGS
                value: "--vault-output-path app-sre/integrations-output"
              - name: GITHUB_API
                valueFrom:
                  configMapKeyRef:
                    name: app-interface
                    key: GITHUB_API
              - name: UNLEASH_API_URL
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: API_URL
              - name: UNLEASH_CLIENT_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: CLIENT_ACCESS_TOKEN
              volumeMounts:
              - name: qontract-reconcile-toml
                mountPath: /config
              resources:
                limits:
                  cpu: ${AWS_ECR_IMAGE_PULL_SECRETS_CPU_LIMIT}
                  memory: ${AWS_ECR_IMAGE_PULL_SECRETS_MEMORY_LIMIT}
                requests:
                  cpu: ${AWS_ECR_IMAGE_PULL_SECRETS_CPU_REQUEST}
                  memory: ${AWS_ECR_IMAGE_PULL_SECRETS_MEMORY_REQUEST}
            restartPolicy: OnFailure
            volumes:
            - name: qontract-reconcile-toml
              secret:
                secretName: qontract-reconcile-toml
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: qontract-reconcile-aws-garbage-collector
    name: qontract-reconcile-aws-garbage-collector
  spec:
    schedule: "0 0 * * 0"
    concurrencyPolicy: Allow
    successfulJobHistoryLimit: 3
    failedJobHistoryLimit: 0
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: int
              image: ${IMAGE}:${IMAGE_TAG}
              env:
              - name: RUN_ONCE
                value: 'true'
              - name: DRY_RUN
                value: ${DRY_RUN}
              - name: INTEGRATION_NAME
                value: aws-garbage-collector
              - name: INTEGRATION_EXTRA_ARGS
                value: ""
              - name: GITHUB_API
                valueFrom:
                  configMapKeyRef:
                    name: app-interface
                    key: GITHUB_API
              - name: UNLEASH_API_URL
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: API_URL
              - name: UNLEASH_CLIENT_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: CLIENT_ACCESS_TOKEN
              volumeMounts:
              - name: qontract-reconcile-toml
                mountPath: /config
              resources:
                limits:
                  cpu: ${AWS_GARBAGE_COLLECTOR_CPU_LIMIT}
                  memory: ${AWS_GARBAGE_COLLECTOR_MEMORY_LIMIT}
                requests:
                  cpu: ${AWS_GARBAGE_COLLECTOR_CPU_REQUEST}
                  memory: ${AWS_GARBAGE_COLLECTOR_MEMORY_REQUEST}
            restartPolicy: OnFailure
            volumes:
            - name: qontract-reconcile-toml
              secret:
                secretName: qontract-reconcile-toml
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: qontract-reconcile-github-users
    name: qontract-reconcile-github-users
  spec:
    schedule: "0 0 1 * *"
    concurrencyPolicy: Allow
    successfulJobHistoryLimit: 3
    failedJobHistoryLimit: 1
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: int
              image: ${IMAGE}:${IMAGE_TAG}
              env:
              - name: RUN_ONCE
                value: 'true'
              - name: DRY_RUN
                value: ${DRY_RUN}
              - name: INTEGRATION_NAME
                value: github-users
              - name: INTEGRATION_EXTRA_ARGS
                value: "--send-mails"
              - name: GITHUB_API
                valueFrom:
                  configMapKeyRef:
                    name: app-interface
                    key: GITHUB_API
              - name: UNLEASH_API_URL
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: API_URL
              - name: UNLEASH_CLIENT_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: unleash
                    key: CLIENT_ACCESS_TOKEN
              - name: gitlab_pr_submitter_queue_url
                valueFrom:
                  secretKeyRef:
                    name: ${APP_INTERFACE_SQS_SECRET_NAME}
                    key: gitlab_pr_submitter_queue_url
              volumeMounts:
              - name: qontract-reconcile-toml
                mountPath: /config
              resources:
                limits:
                  cpu: ${GITHUB_USERS_CPU_LIMIT}
                  memory: ${GITHUB_USERS_MEMORY_LIMIT}
                requests:
                  cpu: ${GITHUB_USERS_CPU_REQUEST}
                  memory: ${GITHUB_USERS_MEMORY_REQUEST}
            restartPolicy: OnFailure
            volumes:
            - name: qontract-reconcile-toml
              secret:
                secretName: qontract-reconcile-toml
- apiVersion: v1
  kind: Service
  metadata:
    name: qontract-reconcile
    labels:
      app: qontract-reconcile
  spec:
    ports:
      - protocol: TCP
        port: 80
        targetPort: 9090
        name: http
    selector:
      component: qontract-reconcile
parameters:
- name: IMAGE
  value: quay.io/app-sre/qontract-reconcile
- name: IMAGE_TAG
  value: latest
- name: BUSYBOX_IMAGE
  value: quay.io/app-sre/ubi8-ubi-minimal
- name: BUSYBOX_IMAGE_TAG
  value: latest
- name: BUSYBOX_IMAGE_PULL_POLICY
  value: Always
- name: FLUENTD_IMAGE
  value: quay.io/app-sre/fluentd
- name: FLUENTD_IMAGE_TAG
  value: latest
- name: FLUENTD_IMAGE_PULL_POLICY
  value: Always
- name: DRY_RUN
  value: --dry-run
- name: SLEEP_DURATION_SECS
  value: "300"
- name: APP_INTERFACE_SQS_SECRET_NAME
  value: app-interface-sqs
- name: APP_INTERFACE_STATE_BUCKET_ACCOUNT
  value: app-sre
- name: APP_INTERFACE_PROJECT_ID
  value: "0"
- name: USER_ID
  value: dummy
- name: LOG_FILE
  value: "/fluentd/log/integration.log"
- name: SLACK_CHANNEL
  value: "sd-app-sre-reconcile-stage"
- name: SLACK_CHANNEL_TRIGGER
  value: "sd-app-sre-triggers-stage"
- name: SLACK_ICON_EMOJI
  value: ":bust_in_silhouette:"
- name: GITHUB_API
  value: 'http://github-mirror.github-mirror-stage.svc.cluster.local'
- name: CLOUDWATCH_SECRET
  value: app-interface-cloudwatch
- name: SENTRY_DSN
  value: ""
- name: SLOW_OC_RECONCILE_THRESHOLD
  value: "600"
- name: LOG_SLOW_OC_RECONCILE
  value: "false"
- name: USE_NATIVE_CLIENT
  value: ""
- name: INTERNAL_CERTIFICATES_IMAGE
  value: quay.io/app-sre/internal-redhat-ca
- name: INTERNAL_CERTIFICATES_IMAGE_TAG
  value: latest
- name: INTERNAL_CERTIFICATES_IMAGE_PULL_POLICY
  value: Always
- name: AWS_IAM_KEYS_CPU_LIMIT
  value: 200m
- name: AWS_IAM_KEYS_MEMORY_LIMIT
  value: 400Mi
- name: AWS_IAM_KEYS_CPU_REQUEST
  value: 100m
- name: AWS_IAM_KEYS_MEMORY_REQUEST
  value: 200Mi
- name: AWS_IAM_PASSWORD_RESET_CPU_LIMIT
  value: 200m
- name: AWS_IAM_PASSWORD_RESET_MEMORY_LIMIT
  value: 200Mi
- name: AWS_IAM_PASSWORD_RESET_CPU_REQUEST
  value: 100m
- name: AWS_IAM_PASSWORD_RESET_MEMORY_REQUEST
  value: 100Mi
- name: DYN_TRAFFIC_DIRECTOR_CPU_LIMIT
  value: 200m
- name: DYN_TRAFFIC_DIRECTOR_MEMORY_LIMIT
  value: 150Mi
- name: DYN_TRAFFIC_DIRECTOR_CPU_REQUEST
  value: 100m
- name: DYN_TRAFFIC_DIRECTOR_MEMORY_REQUEST
  value: 100Mi
- name: GITHUB_CPU_LIMIT
  value: 200m
- name: GITHUB_MEMORY_LIMIT
  value: 130Mi
- name: GITHUB_CPU_REQUEST
  value: 100m
- name: GITHUB_MEMORY_REQUEST
  value: 100Mi
- name: GITHUB_OWNERS_CPU_LIMIT
  value: 200m
- name: GITHUB_OWNERS_MEMORY_LIMIT
  value: 80Mi
- name: GITHUB_OWNERS_CPU_REQUEST
  value: 100m
- name: GITHUB_OWNERS_MEMORY_REQUEST
  value: 50Mi
- name: GITHUB_REPO_INVITES_CPU_LIMIT
  value: 200m
- name: GITHUB_REPO_INVITES_MEMORY_LIMIT
  value: 150Mi
- name: GITHUB_REPO_INVITES_CPU_REQUEST
  value: 100m
- name: GITHUB_REPO_INVITES_MEMORY_REQUEST
  value: 50Mi
- name: QUAY_MEMBERSHIP_CPU_LIMIT
  value: 200m
- name: QUAY_MEMBERSHIP_MEMORY_LIMIT
  value: 150Mi
- name: QUAY_MEMBERSHIP_CPU_REQUEST
  value: 100m
- name: QUAY_MEMBERSHIP_MEMORY_REQUEST
  value: 50Mi
- name: QUAY_MIRROR_SLEEP_DURATION_SECS
  value: "300"
- name: QUAY_MIRROR_CPU_LIMIT
  value: 300m
- name: QUAY_MIRROR_MEMORY_LIMIT
  value: 550Mi
- name: QUAY_MIRROR_CPU_REQUEST
  value: 200m
- name: QUAY_MIRROR_MEMORY_REQUEST
  value: 550Mi
- name: QUAY_MIRROR_ORG_CPU_LIMIT
  value: 300m
- name: QUAY_MIRROR_ORG_MEMORY_LIMIT
  value: 200Mi
- name: QUAY_MIRROR_ORG_CPU_REQUEST
  value: 200m
- name: QUAY_MIRROR_ORG_MEMORY_REQUEST
  value: 150Mi
- name: GCR_MIRROR_CPU_LIMIT
  value: 300m
- name: GCR_MIRROR_MEMORY_LIMIT
  value: 200Mi
- name: GCR_MIRROR_CPU_REQUEST
  value: 200m
- name: GCR_MIRROR_MEMORY_REQUEST
  value: 150Mi
- name: ECR_MIRROR_CPU_LIMIT
  value: 600m
- name: ECR_MIRROR_MEMORY_LIMIT
  value: 500Mi
- name: ECR_MIRROR_CPU_REQUEST
  value: 400m
- name: ECR_MIRROR_MEMORY_REQUEST
  value: 350Mi
- name: QUAY_REPOS_CPU_LIMIT
  value: 200m
- name: QUAY_REPOS_MEMORY_LIMIT
  value: 150Mi
- name: QUAY_REPOS_CPU_REQUEST
  value: 100m
- name: QUAY_REPOS_MEMORY_REQUEST
  value: 50Mi
- name: QUAY_PERMISSIONS_CPU_LIMIT
  value: 200m
- name: QUAY_PERMISSIONS_MEMORY_LIMIT
  value: 100Mi
- name: QUAY_PERMISSIONS_CPU_REQUEST
  value: 100m
- name: QUAY_PERMISSIONS_MEMORY_REQUEST
  value: 50Mi
- name: JIRA_WATCHER_CPU_LIMIT
  value: 200m
- name: JIRA_WATCHER_MEMORY_LIMIT
  value: 200Mi
- name: JIRA_WATCHER_CPU_REQUEST
  value: 100m
- name: JIRA_WATCHER_MEMORY_REQUEST
  value: 80Mi
- name: UNLEASH_WATCHER_CPU_LIMIT
  value: 200m
- name: UNLEASH_WATCHER_MEMORY_LIMIT
  value: 200Mi
- name: UNLEASH_WATCHER_CPU_REQUEST
  value: 100m
- name: UNLEASH_WATCHER_MEMORY_REQUEST
  value: 80Mi
- name: AWS_SUPPORT_CASES_SOS_CPU_LIMIT
  value: 200m
- name: AWS_SUPPORT_CASES_SOS_MEMORY_LIMIT
  value: 400Mi
- name: AWS_SUPPORT_CASES_SOS_CPU_REQUEST
  value: 100m
- name: AWS_SUPPORT_CASES_SOS_MEMORY_REQUEST
  value: 200Mi
- name: OPENSHIFT_USERS_CPU_LIMIT
  value: 500m
- name: OPENSHIFT_USERS_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_USERS_CPU_REQUEST
  value: 400m
- name: OPENSHIFT_USERS_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_GROUPS_CPU_LIMIT
  value: 300m
- name: OPENSHIFT_GROUPS_MEMORY_LIMIT
  value: 780Mi
- name: OPENSHIFT_GROUPS_CPU_REQUEST
  value: 200m
- name: OPENSHIFT_GROUPS_MEMORY_REQUEST
  value: 600Mi
- name: OPENSHIFT_NAMESPACE_LABELS_CPU_LIMIT
  value: 500m
- name: OPENSHIFT_NAMESPACE_LABELS_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_NAMESPACE_LABELS_CPU_REQUEST
  value: 400m
- name: OPENSHIFT_NAMESPACE_LABELS_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_NAMESPACES_CPU_LIMIT
  value: 500m
- name: OPENSHIFT_NAMESPACES_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_NAMESPACES_CPU_REQUEST
  value: 400m
- name: OPENSHIFT_NAMESPACES_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_CLUSTERROLEBINDINGS_CPU_LIMIT
  value: 250m
- name: OPENSHIFT_CLUSTERROLEBINDINGS_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_CLUSTERROLEBINDINGS_CPU_REQUEST
  value: 150m
- name: OPENSHIFT_CLUSTERROLEBINDINGS_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_ROLEBINDINGS_CPU_LIMIT
  value: 800m
- name: OPENSHIFT_ROLEBINDINGS_MEMORY_LIMIT
  value: 900Mi
- name: OPENSHIFT_ROLEBINDINGS_CPU_REQUEST
  value: 600m
- name: OPENSHIFT_ROLEBINDINGS_MEMORY_REQUEST
  value: 700Mi
- name: OPENSHIFT_NETWORK_POLICIES_CPU_LIMIT
  value: 200m
- name: OPENSHIFT_NETWORK_POLICIES_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_NETWORK_POLICIES_CPU_REQUEST
  value: 100m
- name: OPENSHIFT_NETWORK_POLICIES_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_LIMITRANGES_CPU_LIMIT
  value: 300m
- name: OPENSHIFT_LIMITRANGES_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_LIMITRANGES_CPU_REQUEST
  value: 200m
- name: OPENSHIFT_LIMITRANGES_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_RESOURCEQUOTAS_CPU_LIMIT
  value: 1200m
- name: OPENSHIFT_RESOURCEQUOTAS_MEMORY_LIMIT
  value: 1200Mi
- name: OPENSHIFT_RESOURCEQUOTAS_CPU_REQUEST
  value: 900m
- name: OPENSHIFT_RESOURCEQUOTAS_MEMORY_REQUEST
  value: 800Mi
- name: OPENSHIFT_RESOURCES_CPU_LIMIT
  value: 1200m
- name: OPENSHIFT_RESOURCES_MEMORY_LIMIT
  value: 3600Mi
- name: OPENSHIFT_RESOURCES_CPU_REQUEST
  value: 900m
- name: OPENSHIFT_RESOURCES_MEMORY_REQUEST
  value: 1600Mi
- name: OPENSHIFT_VAULT_SECRETS_CPU_LIMIT
  value: 1200m
- name: OPENSHIFT_VAULT_SECRETS_MEMORY_LIMIT
  value: 800Mi
- name: OPENSHIFT_VAULT_SECRETS_CPU_REQUEST
  value: 900m
- name: OPENSHIFT_VAULT_SECRETS_MEMORY_REQUEST
  value: 600Mi
- name: OPENSHIFT_ROUTES_CPU_LIMIT
  value: 300m
- name: OPENSHIFT_ROUTES_MEMORY_LIMIT
  value: 1040Mi
- name: OPENSHIFT_ROUTES_CPU_REQUEST
  value: 200m
- name: OPENSHIFT_ROUTES_MEMORY_REQUEST
  value: 800Mi
- name: TERRAFORM_AWS_ROUTE53_CPU_LIMIT
  value: 500m
- name: TERRAFORM_AWS_ROUTE53_MEMORY_LIMIT
  value: 1000Mi
- name: TERRAFORM_AWS_ROUTE53_CPU_REQUEST
  value: 100m
- name: TERRAFORM_AWS_ROUTE53_MEMORY_REQUEST
  value: 500Mi
- name: TERRAFORM_RESOURCES_WRAPPER_CPU_LIMIT
  value: 400m
- name: TERRAFORM_RESOURCES_WRAPPER_MEMORY_LIMIT
  value: 700Mi
- name: TERRAFORM_RESOURCES_WRAPPER_CPU_REQUEST
  value: 200m
- name: TERRAFORM_RESOURCES_WRAPPER_MEMORY_REQUEST
  value: 500Mi
- name: TERRAFORM_USERS_CPU_LIMIT
  value: 400m
- name: TERRAFORM_USERS_MEMORY_LIMIT
  value: 3000Mi
- name: TERRAFORM_USERS_CPU_REQUEST
  value: 200m
- name: TERRAFORM_USERS_MEMORY_REQUEST
  value: 2400Mi
- name: TERRAFORM_VPC_PEERINGS_CPU_LIMIT
  value: 1400m
- name: TERRAFORM_VPC_PEERINGS_MEMORY_LIMIT
  value: 3200Mi
- name: TERRAFORM_VPC_PEERINGS_CPU_REQUEST
  value: 500m
- name: TERRAFORM_VPC_PEERINGS_MEMORY_REQUEST
  value: 2600Mi
- name: TERRAFORM_TGW_ATTACHMENTS_CPU_LIMIT
  value: 600m
- name: TERRAFORM_TGW_ATTACHMENTS_MEMORY_LIMIT
  value: 3000Mi
- name: TERRAFORM_TGW_ATTACHMENTS_CPU_REQUEST
  value: 400m
- name: TERRAFORM_TGW_ATTACHMENTS_MEMORY_REQUEST
  value: 2300Mi
- name: OCM_ADDONS_CPU_LIMIT
  value: 200m
- name: OCM_ADDONS_MEMORY_LIMIT
  value: 200Mi
- name: OCM_ADDONS_CPU_REQUEST
  value: 100m
- name: OCM_ADDONS_MEMORY_REQUEST
  value: 100Mi
- name: OCM_GROUPS_CPU_LIMIT
  value: 200m
- name: OCM_GROUPS_MEMORY_LIMIT
  value: 200Mi
- name: OCM_GROUPS_CPU_REQUEST
  value: 100m
- name: OCM_GROUPS_MEMORY_REQUEST
  value: 100Mi
- name: OCM_CLUSTERS_CPU_LIMIT
  value: 200m
- name: OCM_CLUSTERS_MEMORY_LIMIT
  value: 200Mi
- name: OCM_CLUSTERS_CPU_REQUEST
  value: 100m
- name: OCM_CLUSTERS_MEMORY_REQUEST
  value: 100Mi
- name: OCM_AWS_INFRASTRUCTURE_ACCESS_SLEEP_DURATION_SECS
  value: "600"
- name: OCM_AWS_INFRASTRUCTURE_ACCESS_CPU_LIMIT
  value: 100m
- name: OCM_AWS_INFRASTRUCTURE_ACCESS_MEMORY_LIMIT
  value: 300Mi
- name: OCM_AWS_INFRASTRUCTURE_ACCESS_CPU_REQUEST
  value: 50m
- name: OCM_AWS_INFRASTRUCTURE_ACCESS_MEMORY_REQUEST
  value: 200Mi
- name: OCM_GITHUB_IDP_CPU_LIMIT
  value: 200m
- name: OCM_GITHUB_IDP_MEMORY_LIMIT
  value: 200Mi
- name: OCM_GITHUB_IDP_CPU_REQUEST
  value: 100m
- name: OCM_GITHUB_IDP_MEMORY_REQUEST
  value: 100Mi
- name: OCM_MACHINE_POOLS_CPU_LIMIT
  value: 200m
- name: OCM_MACHINE_POOLS_MEMORY_LIMIT
  value: 200Mi
- name: OCM_MACHINE_POOLS_CPU_REQUEST
  value: 100m
- name: OCM_MACHINE_POOLS_MEMORY_REQUEST
  value: 100Mi
- name: OCM_UPGRADE_SCHEDULER_CPU_LIMIT
  value: 200m
- name: OCM_UPGRADE_SCHEDULER_MEMORY_LIMIT
  value: 200Mi
- name: OCM_UPGRADE_SCHEDULER_CPU_REQUEST
  value: 100m
- name: OCM_UPGRADE_SCHEDULER_MEMORY_REQUEST
  value: 100Mi
- name: OCM_EXTERNAL_CONFIGURATION_LABELS_CPU_LIMIT
  value: 200m
- name: OCM_EXTERNAL_CONFIGURATION_LABELS_MEMORY_LIMIT
  value: 200Mi
- name: OCM_EXTERNAL_CONFIGURATION_LABELS_CPU_REQUEST
  value: 100m
- name: OCM_EXTERNAL_CONFIGURATION_LABELS_MEMORY_REQUEST
  value: 100Mi
- name: OCM_ADDITIONAL_ROUTERS_CPU_LIMIT
  value: 200m
- name: OCM_ADDITIONAL_ROUTERS_MEMORY_LIMIT
  value: 200Mi
- name: OCM_ADDITIONAL_ROUTERS_CPU_REQUEST
  value: 100m
- name: OCM_ADDITIONAL_ROUTERS_MEMORY_REQUEST
  value: 100Mi
- name: KAFKA_CLUSTERS_CPU_LIMIT
  value: 200m
- name: KAFKA_CLUSTERS_MEMORY_LIMIT
  value: 1000Mi
- name: KAFKA_CLUSTERS_CPU_REQUEST
  value: 100m
- name: KAFKA_CLUSTERS_MEMORY_REQUEST
  value: 800Mi
- name: EMAIL_SENDER_CPU_LIMIT
  value: 50m
- name: EMAIL_SENDER_MEMORY_LIMIT
  value: 200Mi
- name: EMAIL_SENDER_CPU_REQUEST
  value: 25m
- name: EMAIL_SENDER_MEMORY_REQUEST
  value: 100Mi
- name: REQUESTS_SENDER_CPU_LIMIT
  value: 50m
- name: REQUESTS_SENDER_MEMORY_LIMIT
  value: 200Mi
- name: REQUESTS_SENDER_CPU_REQUEST
  value: 25m
- name: REQUESTS_SENDER_MEMORY_REQUEST
  value: 100Mi
- name: SENTRY_CONFIG_CPU_LIMIT
  value: 200m
- name: SENTRY_CONFIG_MEMORY_LIMIT
  value: 200Mi
- name: SENTRY_CONFIG_CPU_REQUEST
  value: 100m
- name: SENTRY_CONFIG_MEMORY_REQUEST
  value: 100Mi
- name: SENTRY_HELPER_CPU_LIMIT
  value: 50m
- name: SENTRY_HELPER_MEMORY_LIMIT
  value: 200Mi
- name: SENTRY_HELPER_CPU_REQUEST
  value: 25m
- name: SENTRY_HELPER_MEMORY_REQUEST
  value: 100Mi
- name: SQL_QUERY_CPU_LIMIT
  value: 300m
- name: SQL_QUERY_MEMORY_LIMIT
  value: 330Mi
- name: SQL_QUERY_CPU_REQUEST
  value: 200m
- name: SQL_QUERY_MEMORY_REQUEST
  value: 250Mi
- name: SLACK_CLUSTER_USERGROUPS_CPU_LIMIT
  value: 200m
- name: SLACK_CLUSTER_USERGROUPS_MEMORY_LIMIT
  value: 400Mi
- name: SLACK_CLUSTER_USERGROUPS_CPU_REQUEST
  value: 100m
- name: SLACK_CLUSTER_USERGROUPS_MEMORY_REQUEST
  value: 200Mi
- name: OCP_RELEASE_MIRROR_CPU_LIMIT
  value: 300m
- name: OCP_RELEASE_MIRROR_MEMORY_LIMIT
  value: 520Mi
- name: OCP_RELEASE_MIRROR_CPU_REQUEST
  value: 200m
- name: OCP_RELEASE_MIRROR_MEMORY_REQUEST
  value: 400Mi
- name: SENDGRID_TEAMMATES_CPU_LIMIT
  value: 200m
- name: SENDGRID_TEAMMATES_MEMORY_LIMIT
  value: 150Mi
- name: SENDGRID_TEAMMATES_CPU_REQUEST
  value: 100m
- name: SENDGRID_TEAMMATES_MEMORY_REQUEST
  value: 50Mi
- name: GABI_AUTHORIZED_USERS_CPU_LIMIT
  value: 300m
- name: GABI_AUTHORIZED_USERS_MEMORY_LIMIT
  value: 800Mi
- name: GABI_AUTHORIZED_USERS_CPU_REQUEST
  value: 200m
- name: GABI_AUTHORIZED_USERS_MEMORY_REQUEST
  value: 600Mi
- name: BLACKBOX_EXPORTER_ENDPOINT_MONITORING_CPU_LIMIT
  value: 200m
- name: BLACKBOX_EXPORTER_ENDPOINT_MONITORING_MEMORY_LIMIT
  value: 200Mi
- name: BLACKBOX_EXPORTER_ENDPOINT_MONITORING_CPU_REQUEST
  value: 100m
- name: BLACKBOX_EXPORTER_ENDPOINT_MONITORING_MEMORY_REQUEST
  value: 100Mi
- name: AWS_ECR_IMAGE_PULL_SECRETS_CPU_LIMIT
  value: 300m
- name: AWS_ECR_IMAGE_PULL_SECRETS_MEMORY_LIMIT
  value: 200Mi
- name: AWS_ECR_IMAGE_PULL_SECRETS_CPU_REQUEST
  value: 200m
- name: AWS_ECR_IMAGE_PULL_SECRETS_MEMORY_REQUEST
  value: 100Mi
- name: AWS_GARBAGE_COLLECTOR_CPU_LIMIT
  value: 50m
- name: AWS_GARBAGE_COLLECTOR_MEMORY_LIMIT
  value: 400Mi
- name: AWS_GARBAGE_COLLECTOR_CPU_REQUEST
  value: 25m
- name: AWS_GARBAGE_COLLECTOR_MEMORY_REQUEST
  value: 200Mi
- name: GITHUB_USERS_CPU_LIMIT
  value: 300m
- name: GITHUB_USERS_MEMORY_LIMIT
  value: 150Mi
- name: GITHUB_USERS_CPU_REQUEST
  value: 200m
- name: GITHUB_USERS_MEMORY_REQUEST
  value: 50Mi
