local slo = import 'valet-libsonnet/valet.libsonnet';

// Labels that will be reused in SLO rules
local labels = [{{ labels_to_selectors(load_json(labels)) }}];

{%- for h in http_rates %}
local {{ h.name + "__http_rates" }} = slo.httpRates({
  metric: '{{ h.metric }}',
  selectors: [{{ labels_to_selectors(load_json(h.selectors)) }}],
  labels: labels,
  {%- if h.httpStatusLabel %}
  codeSelector: h.httpStatusLabel,
  {%- endif %}
});
{%- endfor %}

{%- for l in latency_rates %}
local {{ l.name + "__latency_rates" }} = slo.latencyPercentileRates({
  metric: '{{ l.metric }}',
  selectors: [{{ labels_to_selectors(load_json(l.selectors)) }}],
  percentile: '{{ l.percentile }}',
  labels: labels,
});
{%- endfor %}

{%- for v in volume %}
local {{ v.name + '__volume' }} = slo.volumeSLO({
  rules: {{ v.rules + '__http_rates.rateRules' }},
  threshold: '{{ v.target }}',
  {%- if v.additional_labels %}
  labels: {{ labels_to_selectors(v.additional_labels) }},
  {%- endif %}
});
{%- endfor %}

{%- for l in latency %}
local {{ l.name + '__latency' }} = slo.latencySLO({
  rules: {{ l.rules + '__latency_rates.rules' }},
  threshold: '{{ l.threshold }}',
  {%- if l.additional_labels %}
  labels: {{ labels_to_selectors(l.additional_labels) }},
  {%- endif %}
});
{%- endfor %}

{%- for e in errors %}
local {{ e.name + '__errors' }} = slo.errorsSLO({
  rules: {{ e.rules + '__http_rates.errorRateRules' }},
  threshold: '{{ e.target }}',
  {%- if e.additional_labels %}
  labels: {{ labels_to_selectors(e.additional_labels) }},
  {%- endif %}
});
{%- endfor %}

{%- for a in availability %}
local {{ a.name + '__availability' }} = slo.availabilitySLO({
  latencyRules: {{ build_rules_aoa(a.rules.latency, 'latency') }},
  errorsRules: {{ build_rules_aoa(a.rules.errors, 'errors') }},
  {%- if a.additional_labels %}
  labels: {{ labels_to_selectors(a.additional_labels) }},
  {%- endif %}
});
{%- endfor %}

{
  apiVersion: 'monitoring.coreos.com/v1',
  kind: 'PrometheusRule',
  metadata: {
    name: '{{ component }}-slo-{{ namespace }}',
    labels: {{ prometheus_labels }},
  },
  spec: {
    groups: [
      {
        name: '{{ component }}.slo.rules',
        rules: {{ all_rules|join(" + ") }} + {{ dump_json(raw) }},
       },
    ],
  },
}
