"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from typing import Optional, Union  # noqa: F401 # pylint: disable=W0611

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)


QUERY: str = """
# qenerate: plugin=pydantic_v1

query AppInterfaceSettings {
  settings: app_interface_settings_v1 {
    repoUrl
    vault
    kubeBinary
    mergeRequestGateway
    saasDeployJobTemplate
    hashLength
    smtp {
      mailAddress
      timeout
      credentials {
        path
        field
        version
        format
      }
    }
    imap {
      timeout
      credentials {
        path
        field
        version
        format
      }
    }
    githubRepoInvites {
      credentials {
        path
        field
        version
        format
      }
    }
    ldap {
      serverUrl
      baseDn
    }
    dependencies {
      type
      services {
        name
      }
    }
    credentials {
      name
      secret {
        path
        field
        version
        format
      }
    }
    sqlQuery {
      imageRepository
      pullSecret {
        path
        version
        labels
        annotations
        type
      }
    }
    alertingServices
    endpointMonitoringBlackboxExporterModules
  }
}

"""


class VaultSecretV1(BaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SmtpSettingsV1(BaseModel):
    mail_address: str = Field(..., alias="mailAddress")
    timeout: Optional[int] = Field(..., alias="timeout")
    credentials: VaultSecretV1 = Field(..., alias="credentials")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ImapSettingsV1_VaultSecretV1(BaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ImapSettingsV1(BaseModel):
    timeout: Optional[int] = Field(..., alias="timeout")
    credentials: ImapSettingsV1_VaultSecretV1 = Field(..., alias="credentials")

    class Config:
        smart_union = True
        extra = Extra.forbid


class GithubRepoInvitesV1_VaultSecretV1(BaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")

    class Config:
        smart_union = True
        extra = Extra.forbid


class GithubRepoInvitesV1(BaseModel):
    credentials: GithubRepoInvitesV1_VaultSecretV1 = Field(..., alias="credentials")

    class Config:
        smart_union = True
        extra = Extra.forbid


class LdapSettingsV1(BaseModel):
    server_url: str = Field(..., alias="serverUrl")
    base_dn: str = Field(..., alias="baseDn")

    class Config:
        smart_union = True
        extra = Extra.forbid


class DependencyV1(BaseModel):
    name: str = Field(..., alias="name")

    class Config:
        smart_union = True
        extra = Extra.forbid


class AppInterfaceDependencyMappingV1(BaseModel):
    q_type: str = Field(..., alias="type")
    services: Optional[list[DependencyV1]] = Field(..., alias="services")

    class Config:
        smart_union = True
        extra = Extra.forbid


class CredentialsRequestMapV1_VaultSecretV1(BaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")

    class Config:
        smart_union = True
        extra = Extra.forbid


class CredentialsRequestMapV1(BaseModel):
    name: str = Field(..., alias="name")
    secret: CredentialsRequestMapV1_VaultSecretV1 = Field(..., alias="secret")

    class Config:
        smart_union = True
        extra = Extra.forbid


class NamespaceOpenshiftResourceVaultSecretV1(BaseModel):
    path: str = Field(..., alias="path")
    version: int = Field(..., alias="version")
    labels: Optional[Json] = Field(..., alias="labels")
    annotations: Optional[Json] = Field(..., alias="annotations")
    q_type: Optional[str] = Field(..., alias="type")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SqlQuerySettingsV1(BaseModel):
    image_repository: str = Field(..., alias="imageRepository")
    pull_secret: NamespaceOpenshiftResourceVaultSecretV1 = Field(
        ..., alias="pullSecret"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class AppInterfaceSettingsV1(BaseModel):
    repo_url: str = Field(..., alias="repoUrl")
    vault: bool = Field(..., alias="vault")
    kube_binary: str = Field(..., alias="kubeBinary")
    merge_request_gateway: Optional[str] = Field(..., alias="mergeRequestGateway")
    saas_deploy_job_template: str = Field(..., alias="saasDeployJobTemplate")
    hash_length: int = Field(..., alias="hashLength")
    smtp: Optional[SmtpSettingsV1] = Field(..., alias="smtp")
    imap: Optional[ImapSettingsV1] = Field(..., alias="imap")
    github_repo_invites: Optional[GithubRepoInvitesV1] = Field(
        ..., alias="githubRepoInvites"
    )
    ldap: Optional[LdapSettingsV1] = Field(..., alias="ldap")
    dependencies: Optional[list[AppInterfaceDependencyMappingV1]] = Field(
        ..., alias="dependencies"
    )
    credentials: Optional[list[CredentialsRequestMapV1]] = Field(
        ..., alias="credentials"
    )
    sql_query: Optional[SqlQuerySettingsV1] = Field(..., alias="sqlQuery")
    alerting_services: Optional[list[str]] = Field(..., alias="alertingServices")
    endpoint_monitoring_blackbox_exporter_modules: Optional[list[str]] = Field(
        ..., alias="endpointMonitoringBlackboxExporterModules"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class AppInterfaceSettingsQueryData(BaseModel):
    settings: Optional[list[AppInterfaceSettingsV1]] = Field(..., alias="settings")

    class Config:
        smart_union = True
        extra = Extra.forbid
