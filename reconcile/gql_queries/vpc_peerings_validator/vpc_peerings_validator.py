"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from typing import Optional, Union  # noqa: F401 # pylint: disable=W0611

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)


QUERY: str = """
# qenerate: plugin=pydantic_v1

query VpcPeeringsValidator {
  clusters: clusters_v1 {
    name
    spec {
      private
    }
    internal
    peering {
      connections {
        provider
        ... on ClusterPeeringConnectionClusterRequester_v1 {
          cluster {
            name
            spec {
              private
            }
            internal
          }
        }
        ... on ClusterPeeringConnectionClusterAccepter_v1 {
          cluster {
            name
            spec {
              private
            }
            internal
          }
        }
      }
    }
  }
}

"""


class ClusterSpecV1(BaseModel):
    private: bool = Field(..., alias="private")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionV1(BaseModel):
    provider: str = Field(..., alias="provider")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterSpecV1(BaseModel):
    private: bool = Field(..., alias="private")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1_ClusterV1(BaseModel):
    name: str = Field(..., alias="name")
    spec: Optional[
        ClusterPeeringConnectionClusterRequesterV1_ClusterV1_ClusterSpecV1
    ] = Field(..., alias="spec")
    internal: Optional[bool] = Field(..., alias="internal")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterRequesterV1(ClusterPeeringConnectionV1):
    cluster: ClusterPeeringConnectionClusterRequesterV1_ClusterV1 = Field(
        ..., alias="cluster"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterAccepterV1_ClusterV1_ClusterSpecV1(BaseModel):
    private: bool = Field(..., alias="private")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterAccepterV1_ClusterV1(BaseModel):
    name: str = Field(..., alias="name")
    spec: Optional[
        ClusterPeeringConnectionClusterAccepterV1_ClusterV1_ClusterSpecV1
    ] = Field(..., alias="spec")
    internal: Optional[bool] = Field(..., alias="internal")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringConnectionClusterAccepterV1(ClusterPeeringConnectionV1):
    cluster: ClusterPeeringConnectionClusterAccepterV1_ClusterV1 = Field(
        ..., alias="cluster"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterPeeringV1(BaseModel):
    connections: Optional[
        list[
            Union[
                ClusterPeeringConnectionClusterRequesterV1,
                ClusterPeeringConnectionClusterAccepterV1,
                ClusterPeeringConnectionV1,
            ]
        ]
    ] = Field(..., alias="connections")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterV1(BaseModel):
    name: str = Field(..., alias="name")
    spec: Optional[ClusterSpecV1] = Field(..., alias="spec")
    internal: Optional[bool] = Field(..., alias="internal")
    peering: Optional[ClusterPeeringV1] = Field(..., alias="peering")

    class Config:
        smart_union = True
        extra = Extra.forbid


class VpcPeeringsValidatorQueryData(BaseModel):
    clusters: Optional[list[ClusterV1]] = Field(..., alias="clusters")

    class Config:
        smart_union = True
        extra = Extra.forbid
