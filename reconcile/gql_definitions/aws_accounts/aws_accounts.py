"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from collections.abc import Callable  # noqa: F401 # pylint: disable=W0611
from datetime import datetime  # noqa: F401 # pylint: disable=W0611
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)

from reconcile.gql_definitions.fragments.vault_secret import VaultSecret


DEFINITION = """
fragment VaultSecret on VaultSecret_v1 {
    path
    field
    version
    format
}

query AWSAccounts(
  $name: String,
  $uid: String,
  $ecrs: Boolean!,
  $reset_passwords: Boolean!,
  $sharing: Boolean!,
  $terraform_state: Boolean!,
) {
  accounts: awsaccounts_v1
  (
    name: $name
    uid: $uid
  )
  {
    path
    name
    uid
    terraformUsername
    consoleUrl
    resourcesDefaultRegion
    supportedDeploymentRegions
    providerVersion
    accountOwners {
      name
      email
    }
    automationToken {
      ... VaultSecret
    }
    garbageCollection
    enableDeletion
    deletionApprovals {
      type
      name
      expiration
    }
    disable {
      integrations
    }
    deleteKeys
    resetPasswords @include(if: $reset_passwords) {
      user {
        org_username
      }
      requestId
    }
    premiumSupport
    ecrs @include(if: $ecrs) {
      region
    }
    partition
    sharing @include(if: $sharing) {
      provider
      account {
        name
        uid
        supportedDeploymentRegions
      }
      ... on AWSAccountSharingOptionAMI_v1 {
        regex
        region
      }
    }
    terraformState @include(if: $terraform_state) {
      provider
      bucket
      region
      integrations {
        key
        integration
      }
    }
  }
}
"""


class ConfiguredBaseModel(BaseModel):
    class Config:
        smart_union = True
        extra = Extra.forbid


class OwnerV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    email: str = Field(..., alias="email")


class DeletionApprovalV1(ConfiguredBaseModel):
    q_type: str = Field(..., alias="type")
    name: str = Field(..., alias="name")
    expiration: str = Field(..., alias="expiration")


class DisableClusterAutomationsV1(ConfiguredBaseModel):
    integrations: Optional[list[str]] = Field(..., alias="integrations")


class UserV1(ConfiguredBaseModel):
    org_username: str = Field(..., alias="org_username")


class AWSAccountResetPasswordV1(ConfiguredBaseModel):
    user: UserV1 = Field(..., alias="user")
    request_id: str = Field(..., alias="requestId")


class AWSECRV1(ConfiguredBaseModel):
    region: str = Field(..., alias="region")


class AWSAccountSharingOptionV1_AWSAccountV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    uid: str = Field(..., alias="uid")
    supported_deployment_regions: Optional[list[str]] = Field(
        ..., alias="supportedDeploymentRegions"
    )


class AWSAccountSharingOptionV1(ConfiguredBaseModel):
    provider: str = Field(..., alias="provider")
    account: AWSAccountSharingOptionV1_AWSAccountV1 = Field(..., alias="account")


class AWSAccountSharingOptionAMIV1(AWSAccountSharingOptionV1):
    regex: str = Field(..., alias="regex")
    region: Optional[str] = Field(..., alias="region")


class AWSTerraformStateIntegrationsV1(ConfiguredBaseModel):
    key: str = Field(..., alias="key")
    integration: str = Field(..., alias="integration")


class TerraformStateAWSV1(ConfiguredBaseModel):
    provider: str = Field(..., alias="provider")
    bucket: str = Field(..., alias="bucket")
    region: str = Field(..., alias="region")
    integrations: list[AWSTerraformStateIntegrationsV1] = Field(
        ..., alias="integrations"
    )


class AWSAccountV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    name: str = Field(..., alias="name")
    uid: str = Field(..., alias="uid")
    terraform_username: Optional[str] = Field(..., alias="terraformUsername")
    console_url: str = Field(..., alias="consoleUrl")
    resources_default_region: str = Field(..., alias="resourcesDefaultRegion")
    supported_deployment_regions: Optional[list[str]] = Field(
        ..., alias="supportedDeploymentRegions"
    )
    provider_version: str = Field(..., alias="providerVersion")
    account_owners: list[OwnerV1] = Field(..., alias="accountOwners")
    automation_token: VaultSecret = Field(..., alias="automationToken")
    garbage_collection: Optional[bool] = Field(..., alias="garbageCollection")
    enable_deletion: Optional[bool] = Field(..., alias="enableDeletion")
    deletion_approvals: Optional[list[DeletionApprovalV1]] = Field(
        ..., alias="deletionApprovals"
    )
    disable: Optional[DisableClusterAutomationsV1] = Field(..., alias="disable")
    delete_keys: Optional[list[str]] = Field(..., alias="deleteKeys")
    reset_passwords: Optional[list[AWSAccountResetPasswordV1]] = Field(
        ..., alias="resetPasswords"
    )
    premium_support: bool = Field(..., alias="premiumSupport")
    ecrs: Optional[list[AWSECRV1]] = Field(..., alias="ecrs")
    partition: Optional[str] = Field(..., alias="partition")
    sharing: Optional[
        list[Union[AWSAccountSharingOptionAMIV1, AWSAccountSharingOptionV1]]
    ] = Field(..., alias="sharing")
    terraform_state: Optional[TerraformStateAWSV1] = Field(..., alias="terraformState")


class AWSAccountsQueryData(ConfiguredBaseModel):
    accounts: Optional[list[AWSAccountV1]] = Field(..., alias="accounts")


def query(query_func: Callable, **kwargs: Any) -> AWSAccountsQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        AWSAccountsQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return AWSAccountsQueryData(**raw_data)
