"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from collections.abc import Callable  # noqa: F401 # pylint: disable=W0611
from datetime import datetime  # noqa: F401 # pylint: disable=W0611
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)


DEFINITION = """
query ASGNamespaces {
  namespaces: namespaces_v1 {
    name
    externalResources {
      provider
      provisioner {
        name
      }
      ... on NamespaceTerraformProviderResourceAWS_v1 {
        resources {
            provider
            ... on NamespaceTerraformResourceASG_v1 {
                identifier
                image {
                    provider
                    ... on ASGImageGit_v1 {
                       tag_name
                       url
                       ref
                    }
                    ... on ASGImageStatic_v1 {
                        tag_name
                        value
                    }
                }
            }
        }
      }
    }
  }
}
"""


class ConfiguredBaseModel(BaseModel):
    class Config:
        smart_union = True
        extra = Extra.forbid


class ExternalResourcesProvisionerV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")


class NamespaceExternalResourceV1(ConfiguredBaseModel):
    provider: str = Field(..., alias="provider")
    provisioner: ExternalResourcesProvisionerV1 = Field(..., alias="provisioner")


class NamespaceTerraformResourceAWSV1(ConfiguredBaseModel):
    provider: str = Field(..., alias="provider")


class ASGImageV1(ConfiguredBaseModel):
    provider: str = Field(..., alias="provider")


class ASGImageGitV1(ASGImageV1):
    tag_name: str = Field(..., alias="tag_name")
    url: str = Field(..., alias="url")
    ref: str = Field(..., alias="ref")


class ASGImageStaticV1(ASGImageV1):
    tag_name: str = Field(..., alias="tag_name")
    value: str = Field(..., alias="value")


class NamespaceTerraformResourceASGV1(NamespaceTerraformResourceAWSV1):
    identifier: str = Field(..., alias="identifier")
    image: list[Union[ASGImageGitV1, ASGImageStaticV1, ASGImageV1]] = Field(
        ..., alias="image"
    )


class NamespaceTerraformProviderResourceAWSV1(NamespaceExternalResourceV1):
    resources: list[
        Union[NamespaceTerraformResourceASGV1, NamespaceTerraformResourceAWSV1]
    ] = Field(..., alias="resources")


class NamespaceV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    external_resources: Optional[
        list[
            Union[NamespaceTerraformProviderResourceAWSV1, NamespaceExternalResourceV1]
        ]
    ] = Field(..., alias="externalResources")


class ASGNamespacesQueryData(ConfiguredBaseModel):
    namespaces: Optional[list[NamespaceV1]] = Field(..., alias="namespaces")


def query(query_func: Callable, **kwargs: Any) -> ASGNamespacesQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        ASGNamespacesQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return ASGNamespacesQueryData(**raw_data)
