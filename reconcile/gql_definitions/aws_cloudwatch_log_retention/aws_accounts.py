"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from collections.abc import Callable  # noqa: F401 # pylint: disable=W0611
from datetime import datetime  # noqa: F401 # pylint: disable=W0611
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)


DEFINITION = """
query AWSAccountsCloudwatchLogRetentionCleanup {
  accounts: awsaccounts_v1
  {
    path
    name
    uid
    terraformUsername
    consoleUrl
    resourcesDefaultRegion
    supportedDeploymentRegions
    providerVersion
    accountOwners {
      name
      email
    }
    automationToken {
      path
      field
      version
      format
    }
    garbageCollection
    enableDeletion
    deletionApprovals {
      type
      name
      expiration
    }
    disable {
      integrations
    }
    deleteKeys
    premiumSupport
    ecrs {
      region
    }
    partition
    cleanup {
      provider
      ... on AWSAccountCleanupOptionCloudWatch_v1 {
        regex
        retention_in_days
        delete_empty_log_group
        region
      }
      ... on AWSAccountCleanupOptionAMI_v1 {
        regex
        age
        region
      }
    }
  }
}
"""


class ConfiguredBaseModel(BaseModel):
    class Config:
        smart_union=True
        extra=Extra.forbid


class OwnerV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    email: str = Field(..., alias="email")


class VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class DeletionApprovalV1(ConfiguredBaseModel):
    q_type: str = Field(..., alias="type")
    name: str = Field(..., alias="name")
    expiration: str = Field(..., alias="expiration")


class DisableClusterAutomationsV1(ConfiguredBaseModel):
    integrations: Optional[list[str]] = Field(..., alias="integrations")


class AWSECRV1(ConfiguredBaseModel):
    region: str = Field(..., alias="region")


class AWSAccountCleanupOptionV1(ConfiguredBaseModel):
    provider: str = Field(..., alias="provider")


class AWSAccountCleanupOptionCloudWatchV1(AWSAccountCleanupOptionV1):
    regex: str = Field(..., alias="regex")
    retention_in_days: int = Field(..., alias="retention_in_days")
    delete_empty_log_group: Optional[bool] = Field(..., alias="delete_empty_log_group")
    region: Optional[str] = Field(..., alias="region")


class AWSAccountCleanupOptionAMIV1(AWSAccountCleanupOptionV1):
    regex: str = Field(..., alias="regex")
    age: str = Field(..., alias="age")
    region: Optional[str] = Field(..., alias="region")


class AWSAccountV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    name: str = Field(..., alias="name")
    uid: str = Field(..., alias="uid")
    terraform_username: Optional[str] = Field(..., alias="terraformUsername")
    console_url: str = Field(..., alias="consoleUrl")
    resources_default_region: str = Field(..., alias="resourcesDefaultRegion")
    supported_deployment_regions: Optional[list[str]] = Field(..., alias="supportedDeploymentRegions")
    provider_version: str = Field(..., alias="providerVersion")
    account_owners: list[OwnerV1] = Field(..., alias="accountOwners")
    automation_token: VaultSecretV1 = Field(..., alias="automationToken")
    garbage_collection: Optional[bool] = Field(..., alias="garbageCollection")
    enable_deletion: Optional[bool] = Field(..., alias="enableDeletion")
    deletion_approvals: Optional[list[DeletionApprovalV1]] = Field(..., alias="deletionApprovals")
    disable: Optional[DisableClusterAutomationsV1] = Field(..., alias="disable")
    delete_keys: Optional[list[str]] = Field(..., alias="deleteKeys")
    premium_support: bool = Field(..., alias="premiumSupport")
    ecrs: Optional[list[AWSECRV1]] = Field(..., alias="ecrs")
    partition: Optional[str] = Field(..., alias="partition")
    cleanup: Optional[list[Union[AWSAccountCleanupOptionCloudWatchV1, AWSAccountCleanupOptionAMIV1, AWSAccountCleanupOptionV1]]] = Field(..., alias="cleanup")


class AWSAccountsCloudwatchLogRetentionCleanupQueryData(ConfiguredBaseModel):
    accounts: Optional[list[AWSAccountV1]] = Field(..., alias="accounts")


def query(query_func: Callable, **kwargs: Any) -> AWSAccountsCloudwatchLogRetentionCleanupQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        AWSAccountsCloudwatchLogRetentionCleanupQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return AWSAccountsCloudwatchLogRetentionCleanupQueryData(**raw_data)
