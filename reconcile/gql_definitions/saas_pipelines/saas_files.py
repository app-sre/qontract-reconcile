"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from collections.abc import Callable  # noqa: F401 # pylint: disable=W0611
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)

from reconcile.gql_definitions.fragments.jumphost_common_fields import (
    CommonJumphostFields,
)
from reconcile.gql_definitions.fragments.vault_secret import VaultSecret


DEFINITION = """
fragment CommonJumphostFields on ClusterJumpHost_v1 {
  hostname
  knownHosts
  user
  port
  identity {
    ... VaultSecret
  }
}

fragment VaultSecret on VaultSecret_v1 {
    path
    field
    version
    format
}

query SaasFiles {
  saas_files: saas_files_v2 {
    path
    name
    app {
      name
    }
    pipelinesProvider {
      name
      provider
      ...on PipelinesProviderTekton_v1 {
        namespace {
          name
          cluster {
            name
            consoleUrl
            serverUrl
            insecureSkipTLSVerify
            jumpHost {
              ... CommonJumphostFields
            }
            automationToken {
              ... VaultSecret
            }
            internal
            disable {
              integrations
            }
          }
        }
        defaults {
          pipelineTemplates {
            openshiftSaasDeploy {
              name
            }
          }
        }
        pipelineTemplates {
          openshiftSaasDeploy {
            name
          }
        }
      }
    }
    deployResources {
      requests {
        cpu
        memory
      }
      limits {
        cpu
        memory
      }
    }
    slack {
      output
      workspace {
        name
        integrations {
          name
          token {
            ... VaultSecret
          }
          channel
          icon_emoji
          username
        }
      }
      channel
      notifications {
        start
      }
    }
    managedResourceTypes
    takeover
    deprecated
    compare
    timeout
    publishJobLogs
    clusterAdmin
    imagePatterns
    allowedSecretParameterPaths
    use_channel_in_image_tag
    authentication {
      code {
        ... VaultSecret
      }
      image {
        ... VaultSecret
      }
    }
    parameters
    secretParameters {
      name
      secret {
        ... VaultSecret
      }
    }
    resourceTemplates {
      name
      url
      path
      provider
      hash_length
      parameters
      secretParameters {
        name
        secret {
          ... VaultSecret
        }
      }
      targets {
        path
        name
        namespace {
          name
          environment {
            name
            parameters
            secretParameters {
              name
              secret {
                ... VaultSecret
              }
            }
          }
          app {
            name
          }
          cluster {
            name
            serverUrl
            insecureSkipTLSVerify
            jumpHost {
              ... CommonJumphostFields
            }
            automationToken {
              ... VaultSecret
            }
            clusterAdminAutomationToken {
              ... VaultSecret
            }
            internal
            disable {
              integrations
            }
          }
        }
        ref
        promotion {
          auto
          publish
          subscribe
          promotion_data {
            channel
            data {
              type
              ... on ParentSaasPromotion_v1 {
                parent_saas
                target_config_hash
              }
            }
          }
        }
        parameters
        secretParameters {
          name
          secret {
            ... VaultSecret
          }
        }
        upstream {
          instance {
            name
            serverUrl
          }
          name
        }
        image {
          org {
            name
            instance {
              url
            }
          }
          name
        }
        disable
        delete
      }
    }
    selfServiceRoles {
      users {
        org_username
        tag_on_merge_requests
      }
      bots {
        org_username
      }
    }
  }
}
"""


class AppV1(BaseModel):
    name: str = Field(..., alias="name")

    class Config:
        smart_union = True
        extra = Extra.forbid


class PipelinesProviderV1(BaseModel):
    name: str = Field(..., alias="name")
    provider: str = Field(..., alias="provider")

    class Config:
        smart_union = True
        extra = Extra.forbid


class DisableClusterAutomationsV1(BaseModel):
    integrations: Optional[list[str]] = Field(..., alias="integrations")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterV1(BaseModel):
    name: str = Field(..., alias="name")
    console_url: str = Field(..., alias="consoleUrl")
    server_url: str = Field(..., alias="serverUrl")
    insecure_skip_tls_verify: Optional[bool] = Field(..., alias="insecureSkipTLSVerify")
    jump_host: Optional[CommonJumphostFields] = Field(..., alias="jumpHost")
    automation_token: Optional[VaultSecret] = Field(..., alias="automationToken")
    internal: Optional[bool] = Field(..., alias="internal")
    disable: Optional[DisableClusterAutomationsV1] = Field(..., alias="disable")

    class Config:
        smart_union = True
        extra = Extra.forbid


class NamespaceV1(BaseModel):
    name: str = Field(..., alias="name")
    cluster: ClusterV1 = Field(..., alias="cluster")

    class Config:
        smart_union = True
        extra = Extra.forbid


class PipelinesProviderTektonObjectTemplateV1(BaseModel):
    name: str = Field(..., alias="name")

    class Config:
        smart_union = True
        extra = Extra.forbid


class PipelinesProviderPipelineTemplatesV1(BaseModel):
    openshift_saas_deploy: PipelinesProviderTektonObjectTemplateV1 = Field(
        ..., alias="openshiftSaasDeploy"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class PipelinesProviderTektonProviderDefaultsV1(BaseModel):
    pipeline_templates: PipelinesProviderPipelineTemplatesV1 = Field(
        ..., alias="pipelineTemplates"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class PipelinesProviderTektonV1_PipelinesProviderPipelineTemplatesV1_PipelinesProviderTektonObjectTemplateV1(
    BaseModel
):
    name: str = Field(..., alias="name")

    class Config:
        smart_union = True
        extra = Extra.forbid


class PipelinesProviderTektonV1_PipelinesProviderPipelineTemplatesV1(BaseModel):
    openshift_saas_deploy: PipelinesProviderTektonV1_PipelinesProviderPipelineTemplatesV1_PipelinesProviderTektonObjectTemplateV1 = Field(
        ..., alias="openshiftSaasDeploy"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class PipelinesProviderTektonV1(PipelinesProviderV1):
    namespace: NamespaceV1 = Field(..., alias="namespace")
    defaults: PipelinesProviderTektonProviderDefaultsV1 = Field(..., alias="defaults")
    pipeline_templates: Optional[
        PipelinesProviderTektonV1_PipelinesProviderPipelineTemplatesV1
    ] = Field(..., alias="pipelineTemplates")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ResourceRequirementsV1(BaseModel):
    cpu: str = Field(..., alias="cpu")
    memory: str = Field(..., alias="memory")

    class Config:
        smart_union = True
        extra = Extra.forbid


class DeployResourcesV1_ResourceRequirementsV1(BaseModel):
    cpu: str = Field(..., alias="cpu")
    memory: str = Field(..., alias="memory")

    class Config:
        smart_union = True
        extra = Extra.forbid


class DeployResourcesV1(BaseModel):
    requests: ResourceRequirementsV1 = Field(..., alias="requests")
    limits: DeployResourcesV1_ResourceRequirementsV1 = Field(..., alias="limits")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SlackWorkspaceIntegrationV1(BaseModel):
    name: str = Field(..., alias="name")
    token: VaultSecret = Field(..., alias="token")
    channel: str = Field(..., alias="channel")
    icon_emoji: str = Field(..., alias="icon_emoji")
    username: str = Field(..., alias="username")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SlackWorkspaceV1(BaseModel):
    name: str = Field(..., alias="name")
    integrations: Optional[list[SlackWorkspaceIntegrationV1]] = Field(
        ..., alias="integrations"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class SlackOutputNotificationsV1(BaseModel):
    start: Optional[bool] = Field(..., alias="start")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SlackOutputV1(BaseModel):
    output: Optional[str] = Field(..., alias="output")
    workspace: SlackWorkspaceV1 = Field(..., alias="workspace")
    channel: Optional[str] = Field(..., alias="channel")
    notifications: Optional[SlackOutputNotificationsV1] = Field(
        ..., alias="notifications"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasFileAuthenticationV1(BaseModel):
    code: Optional[VaultSecret] = Field(..., alias="code")
    image: Optional[VaultSecret] = Field(..., alias="image")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasSecretParametersV1(BaseModel):
    name: str = Field(..., alias="name")
    secret: VaultSecret = Field(..., alias="secret")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateV2_SaasSecretParametersV1(BaseModel):
    name: str = Field(..., alias="name")
    secret: VaultSecret = Field(..., alias="secret")

    class Config:
        smart_union = True
        extra = Extra.forbid


class EnvironmentV1_SaasSecretParametersV1(BaseModel):
    name: str = Field(..., alias="name")
    secret: VaultSecret = Field(..., alias="secret")

    class Config:
        smart_union = True
        extra = Extra.forbid


class EnvironmentV1(BaseModel):
    name: str = Field(..., alias="name")
    parameters: Optional[Json] = Field(..., alias="parameters")
    secret_parameters: Optional[list[EnvironmentV1_SaasSecretParametersV1]] = Field(
        ..., alias="secretParameters"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateTargetV2_NamespaceV1_AppV1(BaseModel):
    name: str = Field(..., alias="name")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_DisableClusterAutomationsV1(
    BaseModel
):
    integrations: Optional[list[str]] = Field(..., alias="integrations")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1(BaseModel):
    name: str = Field(..., alias="name")
    server_url: str = Field(..., alias="serverUrl")
    insecure_skip_tls_verify: Optional[bool] = Field(..., alias="insecureSkipTLSVerify")
    jump_host: Optional[CommonJumphostFields] = Field(..., alias="jumpHost")
    automation_token: Optional[VaultSecret] = Field(..., alias="automationToken")
    cluster_admin_automation_token: Optional[VaultSecret] = Field(
        ..., alias="clusterAdminAutomationToken"
    )
    internal: Optional[bool] = Field(..., alias="internal")
    disable: Optional[
        SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_DisableClusterAutomationsV1
    ] = Field(..., alias="disable")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateTargetV2_NamespaceV1(BaseModel):
    name: str = Field(..., alias="name")
    environment: EnvironmentV1 = Field(..., alias="environment")
    app: SaasResourceTemplateTargetV2_NamespaceV1_AppV1 = Field(..., alias="app")
    cluster: SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1 = Field(
        ..., alias="cluster"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class PromotionChannelDataV1(BaseModel):
    q_type: str = Field(..., alias="type")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ParentSaasPromotionV1(PromotionChannelDataV1):
    parent_saas: Optional[str] = Field(..., alias="parent_saas")
    target_config_hash: Optional[str] = Field(..., alias="target_config_hash")

    class Config:
        smart_union = True
        extra = Extra.forbid


class PromotionDataV1(BaseModel):
    channel: Optional[str] = Field(..., alias="channel")
    data: Optional[list[Union[ParentSaasPromotionV1, PromotionChannelDataV1]]] = Field(
        ..., alias="data"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateTargetPromotionV1(BaseModel):
    auto: Optional[bool] = Field(..., alias="auto")
    publish: Optional[list[str]] = Field(..., alias="publish")
    subscribe: Optional[list[str]] = Field(..., alias="subscribe")
    promotion_data: Optional[list[PromotionDataV1]] = Field(..., alias="promotion_data")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateTargetV2_SaasSecretParametersV1(BaseModel):
    name: str = Field(..., alias="name")
    secret: VaultSecret = Field(..., alias="secret")

    class Config:
        smart_union = True
        extra = Extra.forbid


class JenkinsInstanceV1(BaseModel):
    name: str = Field(..., alias="name")
    server_url: str = Field(..., alias="serverUrl")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateTargetUpstreamV1(BaseModel):
    instance: JenkinsInstanceV1 = Field(..., alias="instance")
    name: str = Field(..., alias="name")

    class Config:
        smart_union = True
        extra = Extra.forbid


class QuayInstanceV1(BaseModel):
    url: str = Field(..., alias="url")

    class Config:
        smart_union = True
        extra = Extra.forbid


class QuayOrgV1(BaseModel):
    name: str = Field(..., alias="name")
    instance: QuayInstanceV1 = Field(..., alias="instance")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateTargetImageV1(BaseModel):
    org: QuayOrgV1 = Field(..., alias="org")
    name: str = Field(..., alias="name")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateTargetV2(BaseModel):
    path: Optional[str] = Field(..., alias="path")
    name: Optional[str] = Field(..., alias="name")
    namespace: SaasResourceTemplateTargetV2_NamespaceV1 = Field(..., alias="namespace")
    ref: str = Field(..., alias="ref")
    promotion: Optional[SaasResourceTemplateTargetPromotionV1] = Field(
        ..., alias="promotion"
    )
    parameters: Optional[Json] = Field(..., alias="parameters")
    secret_parameters: Optional[
        list[SaasResourceTemplateTargetV2_SaasSecretParametersV1]
    ] = Field(..., alias="secretParameters")
    upstream: Optional[SaasResourceTemplateTargetUpstreamV1] = Field(
        ..., alias="upstream"
    )
    image: Optional[SaasResourceTemplateTargetImageV1] = Field(..., alias="image")
    disable: Optional[bool] = Field(..., alias="disable")
    delete: Optional[bool] = Field(..., alias="delete")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasResourceTemplateV2(BaseModel):
    name: str = Field(..., alias="name")
    url: str = Field(..., alias="url")
    path: str = Field(..., alias="path")
    provider: Optional[str] = Field(..., alias="provider")
    hash_length: Optional[int] = Field(..., alias="hash_length")
    parameters: Optional[Json] = Field(..., alias="parameters")
    secret_parameters: Optional[
        list[SaasResourceTemplateV2_SaasSecretParametersV1]
    ] = Field(..., alias="secretParameters")
    targets: list[SaasResourceTemplateTargetV2] = Field(..., alias="targets")

    class Config:
        smart_union = True
        extra = Extra.forbid


class UserV1(BaseModel):
    org_username: str = Field(..., alias="org_username")
    tag_on_merge_requests: Optional[bool] = Field(..., alias="tag_on_merge_requests")

    class Config:
        smart_union = True
        extra = Extra.forbid


class BotV1(BaseModel):
    org_username: Optional[str] = Field(..., alias="org_username")

    class Config:
        smart_union = True
        extra = Extra.forbid


class RoleV1(BaseModel):
    users: list[UserV1] = Field(..., alias="users")
    bots: list[BotV1] = Field(..., alias="bots")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasFileV2(BaseModel):
    path: str = Field(..., alias="path")
    name: str = Field(..., alias="name")
    app: AppV1 = Field(..., alias="app")
    pipelines_provider: Union[PipelinesProviderTektonV1, PipelinesProviderV1] = Field(
        ..., alias="pipelinesProvider"
    )
    deploy_resources: Optional[DeployResourcesV1] = Field(..., alias="deployResources")
    slack: Optional[SlackOutputV1] = Field(..., alias="slack")
    managed_resource_types: list[str] = Field(..., alias="managedResourceTypes")
    takeover: Optional[bool] = Field(..., alias="takeover")
    deprecated: Optional[bool] = Field(..., alias="deprecated")
    compare: Optional[bool] = Field(..., alias="compare")
    timeout: Optional[str] = Field(..., alias="timeout")
    publish_job_logs: Optional[bool] = Field(..., alias="publishJobLogs")
    cluster_admin: Optional[bool] = Field(..., alias="clusterAdmin")
    image_patterns: list[str] = Field(..., alias="imagePatterns")
    allowed_secret_parameter_paths: Optional[list[str]] = Field(
        ..., alias="allowedSecretParameterPaths"
    )
    use_channel_in_image_tag: Optional[bool] = Field(
        ..., alias="use_channel_in_image_tag"
    )
    authentication: Optional[SaasFileAuthenticationV1] = Field(
        ..., alias="authentication"
    )
    parameters: Optional[Json] = Field(..., alias="parameters")
    secret_parameters: Optional[list[SaasSecretParametersV1]] = Field(
        ..., alias="secretParameters"
    )
    resource_templates: list[SaasResourceTemplateV2] = Field(
        ..., alias="resourceTemplates"
    )
    self_service_roles: Optional[list[RoleV1]] = Field(..., alias="selfServiceRoles")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasFilesQueryData(BaseModel):
    saas_files: Optional[list[SaasFileV2]] = Field(..., alias="saas_files")

    class Config:
        smart_union = True
        extra = Extra.forbid


def query(query_func: Callable, **kwargs: Any) -> SaasFilesQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        SaasFilesQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return SaasFilesQueryData(**raw_data)
