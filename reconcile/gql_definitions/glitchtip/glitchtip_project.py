"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Callable,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)

from reconcile.gql_definitions.glitchtip.glitchtip_project_fragment import (
    GlitchtipProject,
)


DEFINITION = """
fragment GlitchtipProject on GlitchtipProjects_v1 {
  name
  platform
  teams {
    name
    roles {
      glitchtip_roles {
        organization {
          name
        }
        role
      }
      users {
        org_username
        github_username
      }
    }
  }
  organization {
    name
    instance {
      name
    }
  }
}

query Projects {
  namespaces: namespaces_v1 {
    glitchtipProjects {
      ...GlitchtipProject
    }
  }
}
"""


class NamespaceV1(BaseModel):
    glitchtip_projects: Optional[list[GlitchtipProject]] = Field(
        ..., alias="glitchtipProjects"
    )

    class Config:
        smart_union = True
        extra = Extra.forbid


class ProjectsQueryData(BaseModel):
    namespaces: Optional[list[NamespaceV1]] = Field(..., alias="namespaces")

    class Config:
        smart_union = True
        extra = Extra.forbid


def query(query_func: Callable, **kwargs: Any) -> ProjectsQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        ProjectsQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return ProjectsQueryData(**raw_data)
