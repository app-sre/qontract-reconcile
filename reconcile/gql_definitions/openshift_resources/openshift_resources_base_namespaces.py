"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from collections.abc import Callable  # noqa: F401 # pylint: disable=W0611
from datetime import datetime  # noqa: F401 # pylint: disable=W0611
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)

from reconcile.gql_definitions.fragments.jumphost_common_fields import (
    CommonJumphostFields,
)
from reconcile.gql_definitions.openshift_resources.namespace_openshift_resource_fragment import (
    NamespaceOpenshiftResource,
)
from reconcile.gql_definitions.fragments.vault_secret import VaultSecret


DEFINITION = """
fragment CommonJumphostFields on ClusterJumpHost_v1 {
  hostname
  knownHosts
  user
  port
  remotePort
  identity {
    ... VaultSecret
  }
}

fragment NamespaceOpenshiftResource on NamespaceOpenshiftResource_v1 {
    provider
    ... on NamespaceOpenshiftResourceResource_v1 {
        resource: path {
            content
            path
            schema
        }
        validate_json
        validate_alertmanager_config
        alertmanager_config_key
        enable_query_support
    }
    ... on NamespaceOpenshiftResourceResourceTemplate_v1 {
        resource: path {
            content
            path
            schema
        }
        type
        variables
        validate_alertmanager_config
        alertmanager_config_key
        enable_query_support
    }
    ... on NamespaceOpenshiftResourceVaultSecret_v1 {
        path
        version
        name
        labels
        annotations
        type
        validate_alertmanager_config
        alertmanager_config_key
    }
    ... on NamespaceOpenshiftResourceRoute_v1 {
        resource: path {
            content
            path
            schema
        }
        vault_tls_secret_path
        vault_tls_secret_version
    }
}

fragment VaultSecret on VaultSecret_v1 {
    path
    field
    version
    format
}

query OpenshiftResourcesBaseNamespaces {
  namespaces: namespaces_v1 {
    name
    delete
    clusterAdmin
    managedResourceTypes
    managedResourceTypeOverrides {
      resource
      override
    }
    managedResourceNames {
      resource
      resourceNames
    }
    sharedResources {
      openshiftResources {
        ... NamespaceOpenshiftResource
      }
    }
    openshiftResources {
      ... NamespaceOpenshiftResource
    }
    cluster {
      name
      serverUrl
        auth {
          service
          ... on ClusterAuthGithubOrg_v1 {
              org
          }
          ... on ClusterAuthGithubOrgTeam_v1 {
              org
              team
          }
          # ... on ClusterAuthOIDC_v1 {
          # }
        }
      insecureSkipTLSVerify
      jumpHost {
        ... CommonJumphostFields
      }
      spec {
        version
        region
      }
      network {
        pod
      }
      automationToken {
        ... VaultSecret
      }
      clusterAdminAutomationToken {
        ... VaultSecret
      }
      internal
      disable {
        e2eTests
        integrations
      }
    }
  }
}
"""


class ConfiguredBaseModel(BaseModel):
    class Config:
        smart_union = True
        extra = Extra.forbid


class NamespaceManagedResourceTypeOverridesV1(ConfiguredBaseModel):
    resource: str = Field(..., alias="resource")
    override: str = Field(..., alias="override")


class ManagedResourceNamesV1(ConfiguredBaseModel):
    resource: str = Field(..., alias="resource")
    resource_names: list[str] = Field(..., alias="resourceNames")


class SharedResourcesV1(ConfiguredBaseModel):
    openshift_resources: list[NamespaceOpenshiftResource] = Field(
        ..., alias="openshiftResources"
    )


class ClusterAuthV1(ConfiguredBaseModel):
    service: str = Field(..., alias="service")


class ClusterAuthGithubOrgV1(ClusterAuthV1):
    org: str = Field(..., alias="org")


class ClusterAuthGithubOrgTeamV1(ClusterAuthV1):
    org: str = Field(..., alias="org")
    team: str = Field(..., alias="team")


class ClusterSpecV1(ConfiguredBaseModel):
    version: str = Field(..., alias="version")
    region: str = Field(..., alias="region")


class ClusterNetworkV1(ConfiguredBaseModel):
    pod: str = Field(..., alias="pod")


class DisableClusterAutomationsV1(ConfiguredBaseModel):
    e2e_tests: Optional[list[str]] = Field(..., alias="e2eTests")
    integrations: Optional[list[str]] = Field(..., alias="integrations")


class ClusterV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    server_url: str = Field(..., alias="serverUrl")
    auth: list[
        Union[ClusterAuthGithubOrgTeamV1, ClusterAuthGithubOrgV1, ClusterAuthV1]
    ] = Field(..., alias="auth")
    insecure_skip_tls_verify: Optional[bool] = Field(..., alias="insecureSkipTLSVerify")
    jump_host: Optional[CommonJumphostFields] = Field(..., alias="jumpHost")
    spec: Optional[ClusterSpecV1] = Field(..., alias="spec")
    network: Optional[ClusterNetworkV1] = Field(..., alias="network")
    automation_token: Optional[VaultSecret] = Field(..., alias="automationToken")
    cluster_admin_automation_token: Optional[VaultSecret] = Field(
        ..., alias="clusterAdminAutomationToken"
    )
    internal: Optional[bool] = Field(..., alias="internal")
    disable: Optional[DisableClusterAutomationsV1] = Field(..., alias="disable")


class NamespaceV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    delete: Optional[bool] = Field(..., alias="delete")
    cluster_admin: Optional[bool] = Field(..., alias="clusterAdmin")
    managed_resource_types: Optional[list[str]] = Field(
        ..., alias="managedResourceTypes"
    )
    managed_resource_type_overrides: Optional[
        list[NamespaceManagedResourceTypeOverridesV1]
    ] = Field(..., alias="managedResourceTypeOverrides")
    managed_resource_names: Optional[list[ManagedResourceNamesV1]] = Field(
        ..., alias="managedResourceNames"
    )
    shared_resources: Optional[list[SharedResourcesV1]] = Field(
        ..., alias="sharedResources"
    )
    openshift_resources: Optional[list[NamespaceOpenshiftResource]] = Field(
        ..., alias="openshiftResources"
    )
    cluster: ClusterV1 = Field(..., alias="cluster")


class OpenshiftResourcesBaseNamespacesQueryData(ConfiguredBaseModel):
    namespaces: Optional[list[NamespaceV1]] = Field(..., alias="namespaces")


def query(
    query_func: Callable, **kwargs: Any
) -> OpenshiftResourcesBaseNamespacesQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        OpenshiftResourcesBaseNamespacesQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return OpenshiftResourcesBaseNamespacesQueryData(**raw_data)
